/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.49.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import XCTest
@testable import Factory
import NavitiaSDK
import Alamofire
import AlamofireObjectMapper

class StopAreasApiTest: XCTestCase {
    private var testToken:String = "47e2c935-7635-42ec-934c-cc582eaa04b6"

    // StopAreasApi constructor
    func testShouldInstantiateStopAreasApiGivenValidToken() {
        let currentApi:StopAreasApi = StopAreasApi(token: testToken)

        XCTAssertTrue(currentApi != nil, "Api should instantiate with a token")
    }

    func testShouldNotInstantiateStopAreasApiGivenValidToken() {
        let currentApi:StopAreasApi? = nil

/*
        try {
            currentApi = StopAreasApi(token: "")
        } catch (Exception e) {
            assertEquals("Navitia token cannot be empty", e.getMessage())
        }
        XCTAssertTrue(currentApi == nil, "Api should not instantiate with an empty token")
*/
    }

    
        func test_CoverageLonLatStopAreasRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatStopAreasRequestBuilder_get")
    let requestBuilder:CoverageLonLatStopAreasRequestBuilder = StopAreasApi(token: testToken).newCoverageLonLatStopAreasRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)

    var asyncResult:StopAreas? = nil
    requestBuilder.get(completion: {
        (response: StopAreas?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopAreas!.count > 0, "CoverageLonLatStopAreasRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopAreas!.first != nil, "CoverageLonLatStopAreasRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatStopAreasIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatStopAreasIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatStopAreasIdRequestBuilder = StopAreasApi(token: testToken).newCoverageLonLatStopAreasIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withId("stop_area:JDR:SA:GareMontparnasse")

    var asyncResult:StopAreas? = nil
    requestBuilder.get(completion: {
        (response: StopAreas?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopAreas!.count > 0, "CoverageLonLatStopAreasIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopAreas!.first != nil, "CoverageLonLatStopAreasIdRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriStopAreasRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriStopAreasRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriStopAreasRequestBuilder = StopAreasApi(token: testToken).newCoverageLonLatUriStopAreasRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:StopAreas? = nil
    requestBuilder.get(completion: {
        (response: StopAreas?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopAreas!.count > 0, "CoverageLonLatUriStopAreasRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopAreas!.first != nil, "CoverageLonLatUriStopAreasRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriStopAreasIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriStopAreasIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriStopAreasIdRequestBuilder = StopAreasApi(token: testToken).newCoverageLonLatUriStopAreasIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:TGV")
    requestBuilder.withId("stop_area:JDR:SA:GareMontparnasse")

    var asyncResult:StopAreas? = nil
    requestBuilder.get(completion: {
        (response: StopAreas?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopAreas!.count > 0, "CoverageLonLatUriStopAreasIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopAreas!.first != nil, "CoverageLonLatUriStopAreasIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionStopAreasRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionStopAreasRequestBuilder_get")
    let requestBuilder:CoverageRegionStopAreasRequestBuilder = StopAreasApi(token: testToken).newCoverageRegionStopAreasRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")

    var asyncResult:StopAreas? = nil
    requestBuilder.get(completion: {
        (response: StopAreas?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopAreas!.count > 0, "CoverageRegionStopAreasRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopAreas!.first != nil, "CoverageRegionStopAreasRequestBuilder_get : first element")
}
    
        func test_CoverageRegionStopAreasIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionStopAreasIdRequestBuilder_get")
    let requestBuilder:CoverageRegionStopAreasIdRequestBuilder = StopAreasApi(token: testToken).newCoverageRegionStopAreasIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withId("stop_area:JDR:SA:GareMontparnasse")

    var asyncResult:StopAreas? = nil
    requestBuilder.get(completion: {
        (response: StopAreas?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopAreas!.count > 0, "CoverageRegionStopAreasIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopAreas!.first != nil, "CoverageRegionStopAreasIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriStopAreasRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriStopAreasRequestBuilder_get")
    let requestBuilder:CoverageRegionUriStopAreasRequestBuilder = StopAreasApi(token: testToken).newCoverageRegionUriStopAreasRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:StopAreas? = nil
    requestBuilder.get(completion: {
        (response: StopAreas?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopAreas!.count > 0, "CoverageRegionUriStopAreasRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopAreas!.first != nil, "CoverageRegionUriStopAreasRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriStopAreasIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriStopAreasIdRequestBuilder_get")
    let requestBuilder:CoverageRegionUriStopAreasIdRequestBuilder = StopAreasApi(token: testToken).newCoverageRegionUriStopAreasIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:TGV")
    requestBuilder.withId("stop_area:JDR:SA:GareMontparnasse")

    var asyncResult:StopAreas? = nil
    requestBuilder.get(completion: {
        (response: StopAreas?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopAreas!.count > 0, "CoverageRegionUriStopAreasIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopAreas!.first != nil, "CoverageRegionUriStopAreasIdRequestBuilder_get : first element")
}
    
        func test_StopAreasRequestBuilder_get() {
    let expectation = self.expectation(description: "StopAreasRequestBuilder_get")
    let requestBuilder:StopAreasRequestBuilder = StopAreasApi(token: testToken).newStopAreasRequestBuilder()

    // Test case parameters
    requestBuilder.withExternalCode("JDRGareMontparnasse")

    var asyncResult:StopAreas? = nil
    requestBuilder.get(completion: {
        (response: StopAreas?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopAreas!.count > 0, "StopAreasRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopAreas!.first != nil, "StopAreasRequestBuilder_get : first element")
}
    
}
