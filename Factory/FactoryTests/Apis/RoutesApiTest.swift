/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.49.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import XCTest
@testable import Factory
import NavitiaSDK
import Alamofire
import AlamofireObjectMapper

class RoutesApiTest: XCTestCase {
    private var testToken:String = "47e2c935-7635-42ec-934c-cc582eaa04b6"

    // RoutesApi constructor
    func testShouldInstantiateRoutesApiGivenValidToken() {
        let currentApi:RoutesApi = RoutesApi(token: testToken)

        XCTAssertTrue(currentApi != nil, "Api should instantiate with a token")
    }

    func testShouldNotInstantiateRoutesApiGivenValidToken() {
        let currentApi:RoutesApi? = nil

/*
        try {
            currentApi = RoutesApi(token: "")
        } catch (Exception e) {
            assertEquals("Navitia token cannot be empty", e.getMessage())
        }
        XCTAssertTrue(currentApi == nil, "Api should not instantiate with an empty token")
*/
    }

    
        func test_CoverageLonLatRoutesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatRoutesRequestBuilder_get")
    let requestBuilder:CoverageLonLatRoutesRequestBuilder = RoutesApi(token: testToken).newCoverageLonLatRoutesRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)

    var asyncResult:Routes? = nil
    requestBuilder.get(completion: {
        (response: Routes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.routes!.count > 0, "CoverageLonLatRoutesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.routes!.first != nil, "CoverageLonLatRoutesRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatRoutesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatRoutesIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatRoutesIdRequestBuilder = RoutesApi(token: testToken).newCoverageLonLatRoutesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withId("route:JDR:TGV")

    var asyncResult:Routes? = nil
    requestBuilder.get(completion: {
        (response: Routes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.routes!.count > 0, "CoverageLonLatRoutesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.routes!.first != nil, "CoverageLonLatRoutesIdRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriRoutesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriRoutesRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriRoutesRequestBuilder = RoutesApi(token: testToken).newCoverageLonLatUriRoutesRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:Routes? = nil
    requestBuilder.get(completion: {
        (response: Routes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.routes!.count > 0, "CoverageLonLatUriRoutesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.routes!.first != nil, "CoverageLonLatUriRoutesRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriRoutesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriRoutesIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriRoutesIdRequestBuilder = RoutesApi(token: testToken).newCoverageLonLatUriRoutesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:TGV")
    requestBuilder.withId("route:JDR:TGV")

    var asyncResult:Routes? = nil
    requestBuilder.get(completion: {
        (response: Routes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.routes!.count > 0, "CoverageLonLatUriRoutesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.routes!.first != nil, "CoverageLonLatUriRoutesIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionRoutesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionRoutesRequestBuilder_get")
    let requestBuilder:CoverageRegionRoutesRequestBuilder = RoutesApi(token: testToken).newCoverageRegionRoutesRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")

    var asyncResult:Routes? = nil
    requestBuilder.get(completion: {
        (response: Routes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.routes!.count > 0, "CoverageRegionRoutesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.routes!.first != nil, "CoverageRegionRoutesRequestBuilder_get : first element")
}
    
        func test_CoverageRegionRoutesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionRoutesIdRequestBuilder_get")
    let requestBuilder:CoverageRegionRoutesIdRequestBuilder = RoutesApi(token: testToken).newCoverageRegionRoutesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withId("route:JDR:TGV")

    var asyncResult:Routes? = nil
    requestBuilder.get(completion: {
        (response: Routes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.routes!.count > 0, "CoverageRegionRoutesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.routes!.first != nil, "CoverageRegionRoutesIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriRoutesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriRoutesRequestBuilder_get")
    let requestBuilder:CoverageRegionUriRoutesRequestBuilder = RoutesApi(token: testToken).newCoverageRegionUriRoutesRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:Routes? = nil
    requestBuilder.get(completion: {
        (response: Routes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.routes!.count > 0, "CoverageRegionUriRoutesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.routes!.first != nil, "CoverageRegionUriRoutesRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriRoutesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriRoutesIdRequestBuilder_get")
    let requestBuilder:CoverageRegionUriRoutesIdRequestBuilder = RoutesApi(token: testToken).newCoverageRegionUriRoutesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:TGV")
    requestBuilder.withId("route:JDR:TGV")

    var asyncResult:Routes? = nil
    requestBuilder.get(completion: {
        (response: Routes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.routes!.count > 0, "CoverageRegionUriRoutesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.routes!.first != nil, "CoverageRegionUriRoutesIdRequestBuilder_get : first element")
}
    
        func test_RoutesRequestBuilder_get() {}

    
}
