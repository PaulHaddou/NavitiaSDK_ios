/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.50.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import XCTest
@testable import Factory
import NavitiaSDK
import Alamofire
import AlamofireObjectMapper

class StopPointsApiTest: XCTestCase {
    private var testToken:String = "47e2c935-7635-42ec-934c-cc582eaa04b6"

    // StopPointsApi constructor
    func testShouldInstantiateStopPointsApiGivenValidToken() {
        let currentApi:StopPointsApi = StopPointsApi(token: testToken)

        XCTAssertTrue(currentApi != nil, "Api should instantiate with a token")
    }

    func testShouldNotInstantiateStopPointsApiGivenValidToken() {
        let currentApi:StopPointsApi? = nil

/*
        try {
            currentApi = StopPointsApi(token: "")
        } catch (Exception e) {
            assertEquals("Navitia token cannot be empty", e.getMessage())
        }
        XCTAssertTrue(currentApi == nil, "Api should not instantiate with an empty token")
*/
    }

    
        func test_CoverageLonLatStopPointsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatStopPointsRequestBuilder_get")
    let requestBuilder:CoverageLonLatStopPointsRequestBuilder = StopPointsApi(token: testToken).newCoverageLonLatStopPointsRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)

    var asyncResult:StopPoints? = nil
    requestBuilder.get(completion: {
        (response: StopPoints?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopPoints!.count > 0, "CoverageLonLatStopPointsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopPoints!.first != nil, "CoverageLonLatStopPointsRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatStopPointsIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatStopPointsIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatStopPointsIdRequestBuilder = StopPointsApi(token: testToken).newCoverageLonLatStopPointsIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withId("stop_point:JDR:SP:GareMontparnasse-TGV")

    var asyncResult:StopPoints? = nil
    requestBuilder.get(completion: {
        (response: StopPoints?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopPoints!.count > 0, "CoverageLonLatStopPointsIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopPoints!.first != nil, "CoverageLonLatStopPointsIdRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriStopPointsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriStopPointsRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriStopPointsRequestBuilder = StopPointsApi(token: testToken).newCoverageLonLatUriStopPointsRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:StopPoints? = nil
    requestBuilder.get(completion: {
        (response: StopPoints?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopPoints!.count > 0, "CoverageLonLatUriStopPointsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopPoints!.first != nil, "CoverageLonLatUriStopPointsRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriStopPointsIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriStopPointsIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriStopPointsIdRequestBuilder = StopPointsApi(token: testToken).newCoverageLonLatUriStopPointsIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:TGV")
    requestBuilder.withId("stop_point:JDR:SP:GareMontparnasse-TGV")

    var asyncResult:StopPoints? = nil
    requestBuilder.get(completion: {
        (response: StopPoints?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopPoints!.count > 0, "CoverageLonLatUriStopPointsIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopPoints!.first != nil, "CoverageLonLatUriStopPointsIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionStopPointsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionStopPointsRequestBuilder_get")
    let requestBuilder:CoverageRegionStopPointsRequestBuilder = StopPointsApi(token: testToken).newCoverageRegionStopPointsRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")

    var asyncResult:StopPoints? = nil
    requestBuilder.get(completion: {
        (response: StopPoints?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopPoints!.count > 0, "CoverageRegionStopPointsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopPoints!.first != nil, "CoverageRegionStopPointsRequestBuilder_get : first element")
}
    
        func test_CoverageRegionStopPointsIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionStopPointsIdRequestBuilder_get")
    let requestBuilder:CoverageRegionStopPointsIdRequestBuilder = StopPointsApi(token: testToken).newCoverageRegionStopPointsIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withId("stop_point:JDR:SP:GareMontparnasse-TGV")

    var asyncResult:StopPoints? = nil
    requestBuilder.get(completion: {
        (response: StopPoints?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopPoints!.count > 0, "CoverageRegionStopPointsIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopPoints!.first != nil, "CoverageRegionStopPointsIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriStopPointsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriStopPointsRequestBuilder_get")
    let requestBuilder:CoverageRegionUriStopPointsRequestBuilder = StopPointsApi(token: testToken).newCoverageRegionUriStopPointsRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:StopPoints? = nil
    requestBuilder.get(completion: {
        (response: StopPoints?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopPoints!.count > 0, "CoverageRegionUriStopPointsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopPoints!.first != nil, "CoverageRegionUriStopPointsRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriStopPointsIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriStopPointsIdRequestBuilder_get")
    let requestBuilder:CoverageRegionUriStopPointsIdRequestBuilder = StopPointsApi(token: testToken).newCoverageRegionUriStopPointsIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:TGV")
    requestBuilder.withId("stop_point:JDR:SP:GareMontparnasse-TGV")

    var asyncResult:StopPoints? = nil
    requestBuilder.get(completion: {
        (response: StopPoints?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopPoints!.count > 0, "CoverageRegionUriStopPointsIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopPoints!.first != nil, "CoverageRegionUriStopPointsIdRequestBuilder_get : first element")
}
    
        func test_StopPointsRequestBuilder_get() {
    let expectation = self.expectation(description: "StopPointsRequestBuilder_get")
    let requestBuilder:StopPointsRequestBuilder = StopPointsApi(token: testToken).newStopPointsRequestBuilder()

    // Test case parameters
    requestBuilder.withExternalCode("JDRGareMontparnasse-TGV")

    var asyncResult:StopPoints? = nil
    requestBuilder.get(completion: {
        (response: StopPoints?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.stopPoints!.count > 0, "StopPointsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.stopPoints!.first != nil, "StopPointsRequestBuilder_get : first element")
}
    
}
