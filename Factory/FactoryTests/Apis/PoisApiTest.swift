/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.49.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import XCTest
@testable import Factory
import NavitiaSDK
import Alamofire
import AlamofireObjectMapper

class PoisApiTest: XCTestCase {
    private var testToken:String = "47e2c935-7635-42ec-934c-cc582eaa04b6"

    // PoisApi constructor
    func testShouldInstantiatePoisApiGivenValidToken() {
        let currentApi:PoisApi = PoisApi(token: testToken)

        XCTAssertTrue(currentApi != nil, "Api should instantiate with a token")
    }

    func testShouldNotInstantiatePoisApiGivenValidToken() {
        let currentApi:PoisApi? = nil

/*
        try {
            currentApi = PoisApi(token: "")
        } catch (Exception e) {
            assertEquals("Navitia token cannot be empty", e.getMessage())
        }
        XCTAssertTrue(currentApi == nil, "Api should not instantiate with an empty token")
*/
    }

    
        func test_CoverageLonLatPoisRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatPoisRequestBuilder_get")
    let requestBuilder:CoverageLonLatPoisRequestBuilder = PoisApi(token: testToken).newCoverageLonLatPoisRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)

    var asyncResult:Pois? = nil
    requestBuilder.get(completion: {
        (response: Pois?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.pois!.count > 0, "CoverageLonLatPoisRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.pois!.first != nil, "CoverageLonLatPoisRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatPoisIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatPoisIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatPoisIdRequestBuilder = PoisApi(token: testToken).newCoverageLonLatPoisIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withId("poi:3688311710")

    var asyncResult:Pois? = nil
    requestBuilder.get(completion: {
        (response: Pois?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.pois!.count > 0, "CoverageLonLatPoisIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.pois!.first != nil, "CoverageLonLatPoisIdRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriPoisRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriPoisRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriPoisRequestBuilder = PoisApi(token: testToken).newCoverageLonLatUriPoisRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("poi_types/poi_type:college")

    var asyncResult:Pois? = nil
    requestBuilder.get(completion: {
        (response: Pois?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.pois!.count > 0, "CoverageLonLatUriPoisRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.pois!.first != nil, "CoverageLonLatUriPoisRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriPoisIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriPoisIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriPoisIdRequestBuilder = PoisApi(token: testToken).newCoverageLonLatUriPoisIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("poi_types/poi_type:college")
    requestBuilder.withId("poi:3688311710")

    var asyncResult:Pois? = nil
    requestBuilder.get(completion: {
        (response: Pois?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.pois!.count > 0, "CoverageLonLatUriPoisIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.pois!.first != nil, "CoverageLonLatUriPoisIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionPoisRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionPoisRequestBuilder_get")
    let requestBuilder:CoverageRegionPoisRequestBuilder = PoisApi(token: testToken).newCoverageRegionPoisRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")

    var asyncResult:Pois? = nil
    requestBuilder.get(completion: {
        (response: Pois?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.pois!.count > 0, "CoverageRegionPoisRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.pois!.first != nil, "CoverageRegionPoisRequestBuilder_get : first element")
}
    
        func test_CoverageRegionPoisIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionPoisIdRequestBuilder_get")
    let requestBuilder:CoverageRegionPoisIdRequestBuilder = PoisApi(token: testToken).newCoverageRegionPoisIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withId("poi:3688311710")

    var asyncResult:Pois? = nil
    requestBuilder.get(completion: {
        (response: Pois?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.pois!.count > 0, "CoverageRegionPoisIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.pois!.first != nil, "CoverageRegionPoisIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriPoisRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriPoisRequestBuilder_get")
    let requestBuilder:CoverageRegionUriPoisRequestBuilder = PoisApi(token: testToken).newCoverageRegionUriPoisRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("poi_types/poi_type:college")

    var asyncResult:Pois? = nil
    requestBuilder.get(completion: {
        (response: Pois?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.pois!.count > 0, "CoverageRegionUriPoisRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.pois!.first != nil, "CoverageRegionUriPoisRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriPoisIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriPoisIdRequestBuilder_get")
    let requestBuilder:CoverageRegionUriPoisIdRequestBuilder = PoisApi(token: testToken).newCoverageRegionUriPoisIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("poi_types/poi_type:college")
    requestBuilder.withId("poi:3688311710")

    var asyncResult:Pois? = nil
    requestBuilder.get(completion: {
        (response: Pois?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.pois!.count > 0, "CoverageRegionUriPoisIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.pois!.first != nil, "CoverageRegionUriPoisIdRequestBuilder_get : first element")
}
    
}
