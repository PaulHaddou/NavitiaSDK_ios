/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.43.0-42-g9b57eb6
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import XCTest
@testable import Factory
import NavitiaSDK
import Alamofire
import AlamofireObjectMapper

class CommercialModesApiTest: XCTestCase {
    private var testToken:String = "47e2c935-7635-42ec-934c-cc582eaa04b6"

    // CommercialModesApi constructor
    func testShouldInstantiateCommercialModesApiGivenValidToken() {
        let currentApi:CommercialModesApi = CommercialModesApi(token: testToken)

        XCTAssertTrue(currentApi != nil, "Api should instantiate with a token")
    }

    func testShouldNotInstantiateCommercialModesApiGivenValidToken() {
        let currentApi:CommercialModesApi? = nil

/*
        try {
            currentApi = CommercialModesApi(token: "")
        } catch (Exception e) {
            assertEquals("Navitia token cannot be empty", e.getMessage())
        }
        XCTAssertTrue(currentApi == nil, "Api should not instantiate with an empty token")
*/
    }

    
        func test_CoverageLonLatCommercialModesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatCommercialModesRequestBuilder_get")
    let requestBuilder:CoverageLonLatCommercialModesRequestBuilder = CommercialModesApi(token: testToken).newCoverageLonLatCommercialModesRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)

    var asyncResult:CommercialModes? = nil
    requestBuilder.get(completion: {
        (response: CommercialModes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.commercialModes!.count > 0, "CoverageLonLatCommercialModesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.commercialModes!.first != nil, "CoverageLonLatCommercialModesRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatCommercialModesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatCommercialModesIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatCommercialModesIdRequestBuilder = CommercialModesApi(token: testToken).newCoverageLonLatCommercialModesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withId("commercial_mode:TGV")

    var asyncResult:CommercialModes? = nil
    requestBuilder.get(completion: {
        (response: CommercialModes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.commercialModes!.count > 0, "CoverageLonLatCommercialModesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.commercialModes!.first != nil, "CoverageLonLatCommercialModesIdRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriCommercialModesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriCommercialModesRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriCommercialModesRequestBuilder = CommercialModesApi(token: testToken).newCoverageLonLatUriCommercialModesRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:CommercialModes? = nil
    requestBuilder.get(completion: {
        (response: CommercialModes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.commercialModes!.count > 0, "CoverageLonLatUriCommercialModesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.commercialModes!.first != nil, "CoverageLonLatUriCommercialModesRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriCommercialModesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriCommercialModesIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriCommercialModesIdRequestBuilder = CommercialModesApi(token: testToken).newCoverageLonLatUriCommercialModesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:TGV")
    requestBuilder.withId("commercial_mode:TGV")

    var asyncResult:CommercialModes? = nil
    requestBuilder.get(completion: {
        (response: CommercialModes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.commercialModes!.count > 0, "CoverageLonLatUriCommercialModesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.commercialModes!.first != nil, "CoverageLonLatUriCommercialModesIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionCommercialModesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionCommercialModesRequestBuilder_get")
    let requestBuilder:CoverageRegionCommercialModesRequestBuilder = CommercialModesApi(token: testToken).newCoverageRegionCommercialModesRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")

    var asyncResult:CommercialModes? = nil
    requestBuilder.get(completion: {
        (response: CommercialModes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.commercialModes!.count > 0, "CoverageRegionCommercialModesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.commercialModes!.first != nil, "CoverageRegionCommercialModesRequestBuilder_get : first element")
}
    
        func test_CoverageRegionCommercialModesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionCommercialModesIdRequestBuilder_get")
    let requestBuilder:CoverageRegionCommercialModesIdRequestBuilder = CommercialModesApi(token: testToken).newCoverageRegionCommercialModesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withId("commercial_mode:TGV")

    var asyncResult:CommercialModes? = nil
    requestBuilder.get(completion: {
        (response: CommercialModes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.commercialModes!.count > 0, "CoverageRegionCommercialModesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.commercialModes!.first != nil, "CoverageRegionCommercialModesIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriCommercialModesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriCommercialModesRequestBuilder_get")
    let requestBuilder:CoverageRegionUriCommercialModesRequestBuilder = CommercialModesApi(token: testToken).newCoverageRegionUriCommercialModesRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:CommercialModes? = nil
    requestBuilder.get(completion: {
        (response: CommercialModes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.commercialModes!.count > 0, "CoverageRegionUriCommercialModesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.commercialModes!.first != nil, "CoverageRegionUriCommercialModesRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriCommercialModesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriCommercialModesIdRequestBuilder_get")
    let requestBuilder:CoverageRegionUriCommercialModesIdRequestBuilder = CommercialModesApi(token: testToken).newCoverageRegionUriCommercialModesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:TGV")
    requestBuilder.withId("commercial_mode:TGV")

    var asyncResult:CommercialModes? = nil
    requestBuilder.get(completion: {
        (response: CommercialModes?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.commercialModes!.count > 0, "CoverageRegionUriCommercialModesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.commercialModes!.first != nil, "CoverageRegionUriCommercialModesIdRequestBuilder_get : first element")
}
    
}
