/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.50.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import XCTest
@testable import Factory
import NavitiaSDK
import Alamofire
import AlamofireObjectMapper

class CompaniesApiTest: XCTestCase {
    private var testToken:String = "47e2c935-7635-42ec-934c-cc582eaa04b6"

    // CompaniesApi constructor
    func testShouldInstantiateCompaniesApiGivenValidToken() {
        let currentApi:CompaniesApi = CompaniesApi(token: testToken)

        XCTAssertTrue(currentApi != nil, "Api should instantiate with a token")
    }

    func testShouldNotInstantiateCompaniesApiGivenValidToken() {
        let currentApi:CompaniesApi? = nil

/*
        try {
            currentApi = CompaniesApi(token: "")
        } catch (Exception e) {
            assertEquals("Navitia token cannot be empty", e.getMessage())
        }
        XCTAssertTrue(currentApi == nil, "Api should not instantiate with an empty token")
*/
    }

    
        func test_CoverageLonLatCompaniesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatCompaniesRequestBuilder_get")
    let requestBuilder:CoverageLonLatCompaniesRequestBuilder = CompaniesApi(token: testToken).newCoverageLonLatCompaniesRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)

    var asyncResult:Companies? = nil
    requestBuilder.get(completion: {
        (response: Companies?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.companies!.count > 0, "CoverageLonLatCompaniesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.companies!.first != nil, "CoverageLonLatCompaniesRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatCompaniesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatCompaniesIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatCompaniesIdRequestBuilder = CompaniesApi(token: testToken).newCoverageLonLatCompaniesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withId("company:JDR:1")

    var asyncResult:Companies? = nil
    requestBuilder.get(completion: {
        (response: Companies?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.companies!.count > 0, "CoverageLonLatCompaniesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.companies!.first != nil, "CoverageLonLatCompaniesIdRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriCompaniesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriCompaniesRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriCompaniesRequestBuilder = CompaniesApi(token: testToken).newCoverageLonLatUriCompaniesRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:Ter")

    var asyncResult:Companies? = nil
    requestBuilder.get(completion: {
        (response: Companies?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.companies!.count > 0, "CoverageLonLatUriCompaniesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.companies!.first != nil, "CoverageLonLatUriCompaniesRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriCompaniesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriCompaniesIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriCompaniesIdRequestBuilder = CompaniesApi(token: testToken).newCoverageLonLatUriCompaniesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:Ter")
    requestBuilder.withId("company:JDR:1")

    var asyncResult:Companies? = nil
    requestBuilder.get(completion: {
        (response: Companies?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.companies!.count > 0, "CoverageLonLatUriCompaniesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.companies!.first != nil, "CoverageLonLatUriCompaniesIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionCompaniesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionCompaniesRequestBuilder_get")
    let requestBuilder:CoverageRegionCompaniesRequestBuilder = CompaniesApi(token: testToken).newCoverageRegionCompaniesRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")

    var asyncResult:Companies? = nil
    requestBuilder.get(completion: {
        (response: Companies?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.companies!.count > 0, "CoverageRegionCompaniesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.companies!.first != nil, "CoverageRegionCompaniesRequestBuilder_get : first element")
}
    
        func test_CoverageRegionCompaniesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionCompaniesIdRequestBuilder_get")
    let requestBuilder:CoverageRegionCompaniesIdRequestBuilder = CompaniesApi(token: testToken).newCoverageRegionCompaniesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withId("company:JDR:1")

    var asyncResult:Companies? = nil
    requestBuilder.get(completion: {
        (response: Companies?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.companies!.count > 0, "CoverageRegionCompaniesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.companies!.first != nil, "CoverageRegionCompaniesIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriCompaniesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriCompaniesRequestBuilder_get")
    let requestBuilder:CoverageRegionUriCompaniesRequestBuilder = CompaniesApi(token: testToken).newCoverageRegionUriCompaniesRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:Ter")

    var asyncResult:Companies? = nil
    requestBuilder.get(completion: {
        (response: Companies?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.companies!.count > 0, "CoverageRegionUriCompaniesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.companies!.first != nil, "CoverageRegionUriCompaniesRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriCompaniesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriCompaniesIdRequestBuilder_get")
    let requestBuilder:CoverageRegionUriCompaniesIdRequestBuilder = CompaniesApi(token: testToken).newCoverageRegionUriCompaniesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:Ter")
    requestBuilder.withId("company:JDR:1")

    var asyncResult:Companies? = nil
    requestBuilder.get(completion: {
        (response: Companies?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.companies!.count > 0, "CoverageRegionUriCompaniesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.companies!.first != nil, "CoverageRegionUriCompaniesIdRequestBuilder_get : first element")
}
    
}
