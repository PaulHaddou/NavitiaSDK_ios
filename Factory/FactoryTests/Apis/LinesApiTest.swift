/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.50.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import XCTest
@testable import Factory
import NavitiaSDK
import Alamofire
import AlamofireObjectMapper

class LinesApiTest: XCTestCase {
    private var testToken:String = "47e2c935-7635-42ec-934c-cc582eaa04b6"

    // LinesApi constructor
    func testShouldInstantiateLinesApiGivenValidToken() {
        let currentApi:LinesApi = LinesApi(token: testToken)

        XCTAssertTrue(currentApi != nil, "Api should instantiate with a token")
    }

    func testShouldNotInstantiateLinesApiGivenValidToken() {
        let currentApi:LinesApi? = nil

/*
        try {
            currentApi = LinesApi(token: "")
        } catch (Exception e) {
            assertEquals("Navitia token cannot be empty", e.getMessage())
        }
        XCTAssertTrue(currentApi == nil, "Api should not instantiate with an empty token")
*/
    }

    
        func test_CoverageLonLatLinesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatLinesRequestBuilder_get")
    let requestBuilder:CoverageLonLatLinesRequestBuilder = LinesApi(token: testToken).newCoverageLonLatLinesRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)

    var asyncResult:Lines? = nil
    requestBuilder.get(completion: {
        (response: Lines?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.lines!.count > 0, "CoverageLonLatLinesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.lines!.first != nil, "CoverageLonLatLinesRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatLinesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatLinesIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatLinesIdRequestBuilder = LinesApi(token: testToken).newCoverageLonLatLinesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withId("line:JDR:TGV")

    var asyncResult:Lines? = nil
    requestBuilder.get(completion: {
        (response: Lines?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.lines!.count > 0, "CoverageLonLatLinesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.lines!.first != nil, "CoverageLonLatLinesIdRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriLinesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriLinesRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriLinesRequestBuilder = LinesApi(token: testToken).newCoverageLonLatUriLinesRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("commercial_modes/commercial_mode:TGV")

    var asyncResult:Lines? = nil
    requestBuilder.get(completion: {
        (response: Lines?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.lines!.count > 0, "CoverageLonLatUriLinesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.lines!.first != nil, "CoverageLonLatUriLinesRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriLinesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriLinesIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriLinesIdRequestBuilder = LinesApi(token: testToken).newCoverageLonLatUriLinesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("commercial_modes/commercial_mode:TGV")
    requestBuilder.withId("line:JDR:TGV")

    var asyncResult:Lines? = nil
    requestBuilder.get(completion: {
        (response: Lines?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.lines!.count > 0, "CoverageLonLatUriLinesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.lines!.first != nil, "CoverageLonLatUriLinesIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionLinesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionLinesRequestBuilder_get")
    let requestBuilder:CoverageRegionLinesRequestBuilder = LinesApi(token: testToken).newCoverageRegionLinesRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")

    var asyncResult:Lines? = nil
    requestBuilder.get(completion: {
        (response: Lines?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.lines!.count > 0, "CoverageRegionLinesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.lines!.first != nil, "CoverageRegionLinesRequestBuilder_get : first element")
}
    
        func test_CoverageRegionLinesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionLinesIdRequestBuilder_get")
    let requestBuilder:CoverageRegionLinesIdRequestBuilder = LinesApi(token: testToken).newCoverageRegionLinesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withId("line:JDR:TGV")

    var asyncResult:Lines? = nil
    requestBuilder.get(completion: {
        (response: Lines?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.lines!.count > 0, "CoverageRegionLinesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.lines!.first != nil, "CoverageRegionLinesIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriLinesRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriLinesRequestBuilder_get")
    let requestBuilder:CoverageRegionUriLinesRequestBuilder = LinesApi(token: testToken).newCoverageRegionUriLinesRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("commercial_modes/commercial_mode:TGV")

    var asyncResult:Lines? = nil
    requestBuilder.get(completion: {
        (response: Lines?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.lines!.count > 0, "CoverageRegionUriLinesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.lines!.first != nil, "CoverageRegionUriLinesRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriLinesIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriLinesIdRequestBuilder_get")
    let requestBuilder:CoverageRegionUriLinesIdRequestBuilder = LinesApi(token: testToken).newCoverageRegionUriLinesIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("commercial_modes/commercial_mode:TGV")
    requestBuilder.withId("line:JDR:TGV")

    var asyncResult:Lines? = nil
    requestBuilder.get(completion: {
        (response: Lines?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.lines!.count > 0, "CoverageRegionUriLinesIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.lines!.first != nil, "CoverageRegionUriLinesIdRequestBuilder_get : first element")
}
    
        func test_LinesRequestBuilder_get() {
    let expectation = self.expectation(description: "LinesRequestBuilder_get")
    let requestBuilder:LinesRequestBuilder = LinesApi(token: testToken).newLinesRequestBuilder()

    // Test case parameters
    requestBuilder.withExternalCode("JDRTGV")

    var asyncResult:Lines? = nil
    requestBuilder.get(completion: {
        (response: Lines?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.lines!.count > 0, "LinesRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.lines!.first != nil, "LinesRequestBuilder_get : first element")
}
    
}
