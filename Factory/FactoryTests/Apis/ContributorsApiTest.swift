/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.43.0-34-g30b0bcf
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import XCTest
@testable import Factory
import NavitiaSDK
import Alamofire
import AlamofireObjectMapper

class ContributorsApiTest: XCTestCase {
    private var testToken:String = "47e2c935-7635-42ec-934c-cc582eaa04b6"

    // ContributorsApi constructor
    func testShouldInstantiateContributorsApiGivenValidToken() {
        let currentApi:ContributorsApi = ContributorsApi(token: testToken)

        XCTAssertTrue(currentApi != nil, "Api should instantiate with a token")
    }

    func testShouldNotInstantiateContributorsApiGivenValidToken() {
        let currentApi:ContributorsApi? = nil

/*
        try {
            currentApi = ContributorsApi(token: "")
        } catch (Exception e) {
            assertEquals("Navitia token cannot be empty", e.getMessage())
        }
        XCTAssertTrue(currentApi == nil, "Api should not instantiate with an empty token")
*/
    }

    
        func test_CoverageLonLatContributorsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatContributorsRequestBuilder_get")
    let requestBuilder:CoverageLonLatContributorsRequestBuilder = ContributorsApi(token: testToken).newCoverageLonLatContributorsRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)

    var asyncResult:Contributors? = nil
    requestBuilder.get(completion: {
        (response: Contributors?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.contributors!.count > 0, "CoverageLonLatContributorsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.contributors!.first != nil, "CoverageLonLatContributorsRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatContributorsIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatContributorsIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatContributorsIdRequestBuilder = ContributorsApi(token: testToken).newCoverageLonLatContributorsIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withId("JDR")

    var asyncResult:Contributors? = nil
    requestBuilder.get(completion: {
        (response: Contributors?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.contributors!.count > 0, "CoverageLonLatContributorsIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.contributors!.first != nil, "CoverageLonLatContributorsIdRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriContributorsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriContributorsRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriContributorsRequestBuilder = ContributorsApi(token: testToken).newCoverageLonLatUriContributorsRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:Contributors? = nil
    requestBuilder.get(completion: {
        (response: Contributors?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.contributors!.count > 0, "CoverageLonLatUriContributorsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.contributors!.first != nil, "CoverageLonLatUriContributorsRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriContributorsIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriContributorsIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriContributorsIdRequestBuilder = ContributorsApi(token: testToken).newCoverageLonLatUriContributorsIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:TGV")
    requestBuilder.withId("JDR")

    var asyncResult:Contributors? = nil
    requestBuilder.get(completion: {
        (response: Contributors?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.contributors!.count > 0, "CoverageLonLatUriContributorsIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.contributors!.first != nil, "CoverageLonLatUriContributorsIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionContributorsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionContributorsRequestBuilder_get")
    let requestBuilder:CoverageRegionContributorsRequestBuilder = ContributorsApi(token: testToken).newCoverageRegionContributorsRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")

    var asyncResult:Contributors? = nil
    requestBuilder.get(completion: {
        (response: Contributors?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.contributors!.count > 0, "CoverageRegionContributorsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.contributors!.first != nil, "CoverageRegionContributorsRequestBuilder_get : first element")
}
    
        func test_CoverageRegionContributorsIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionContributorsIdRequestBuilder_get")
    let requestBuilder:CoverageRegionContributorsIdRequestBuilder = ContributorsApi(token: testToken).newCoverageRegionContributorsIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withId("JDR")

    var asyncResult:Contributors? = nil
    requestBuilder.get(completion: {
        (response: Contributors?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.contributors!.count > 0, "CoverageRegionContributorsIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.contributors!.first != nil, "CoverageRegionContributorsIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriContributorsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriContributorsRequestBuilder_get")
    let requestBuilder:CoverageRegionUriContributorsRequestBuilder = ContributorsApi(token: testToken).newCoverageRegionUriContributorsRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:Contributors? = nil
    requestBuilder.get(completion: {
        (response: Contributors?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.contributors!.count > 0, "CoverageRegionUriContributorsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.contributors!.first != nil, "CoverageRegionUriContributorsRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriContributorsIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriContributorsIdRequestBuilder_get")
    let requestBuilder:CoverageRegionUriContributorsIdRequestBuilder = ContributorsApi(token: testToken).newCoverageRegionUriContributorsIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:TGV")
    requestBuilder.withId("JDR")

    var asyncResult:Contributors? = nil
    requestBuilder.get(completion: {
        (response: Contributors?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.contributors!.count > 0, "CoverageRegionUriContributorsIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.contributors!.first != nil, "CoverageRegionUriContributorsIdRequestBuilder_get : first element")
}
    
}
