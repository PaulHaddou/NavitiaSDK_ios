/*
 * navitia
 *      navitia.io is the open API for building cool stuff with mobility data. It provides the following services      * journeys computation     * line schedules     * next departures     * exploration of public transport data / search places     * and sexy things such as isochrones      navitia is a HATEOAS API that returns JSON formated results     
 *
 * OpenAPI spec version: v2.50.0
 * Contact: navitia@googlegroups.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import XCTest
@testable import Factory
import NavitiaSDK
import Alamofire
import AlamofireObjectMapper

class JourneyPatternsApiTest: XCTestCase {
    private var testToken:String = "47e2c935-7635-42ec-934c-cc582eaa04b6"

    // JourneyPatternsApi constructor
    func testShouldInstantiateJourneyPatternsApiGivenValidToken() {
        let currentApi:JourneyPatternsApi = JourneyPatternsApi(token: testToken)

        XCTAssertTrue(currentApi != nil, "Api should instantiate with a token")
    }

    func testShouldNotInstantiateJourneyPatternsApiGivenValidToken() {
        let currentApi:JourneyPatternsApi? = nil

/*
        try {
            currentApi = JourneyPatternsApi(token: "")
        } catch (Exception e) {
            assertEquals("Navitia token cannot be empty", e.getMessage())
        }
        XCTAssertTrue(currentApi == nil, "Api should not instantiate with an empty token")
*/
    }

    
        func test_CoverageLonLatJourneyPatternsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatJourneyPatternsRequestBuilder_get")
    let requestBuilder:CoverageLonLatJourneyPatternsRequestBuilder = JourneyPatternsApi(token: testToken).newCoverageLonLatJourneyPatternsRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)

    var asyncResult:JourneyPatterns? = nil
    requestBuilder.get(completion: {
        (response: JourneyPatterns?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.journeyPatterns!.count > 0, "CoverageLonLatJourneyPatternsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.journeyPatterns!.first != nil, "CoverageLonLatJourneyPatternsRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatJourneyPatternsIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatJourneyPatternsIdRequestBuilder_get")
    let requestBuilder:CoverageLonLatJourneyPatternsIdRequestBuilder = JourneyPatternsApi(token: testToken).newCoverageLonLatJourneyPatternsIdRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withId("journey_pattern:0")

    var asyncResult:JourneyPatterns? = nil
    requestBuilder.get(completion: {
        (response: JourneyPatterns?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.journeyPatterns!.count > 0, "CoverageLonLatJourneyPatternsIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.journeyPatterns!.first != nil, "CoverageLonLatJourneyPatternsIdRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriJourneyPatternsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageLonLatUriJourneyPatternsRequestBuilder_get")
    let requestBuilder:CoverageLonLatUriJourneyPatternsRequestBuilder = JourneyPatternsApi(token: testToken).newCoverageLonLatUriJourneyPatternsRequestBuilder()

    // Test case parameters
    requestBuilder.withLat(48.8459388)
    requestBuilder.withLon(2.3709227)
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:JourneyPatterns? = nil
    requestBuilder.get(completion: {
        (response: JourneyPatterns?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.journeyPatterns!.count > 0, "CoverageLonLatUriJourneyPatternsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.journeyPatterns!.first != nil, "CoverageLonLatUriJourneyPatternsRequestBuilder_get : first element")
}
    
        func test_CoverageLonLatUriJourneyPatternsIdRequestBuilder_get() {}

    
        func test_CoverageRegionJourneyPatternsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionJourneyPatternsRequestBuilder_get")
    let requestBuilder:CoverageRegionJourneyPatternsRequestBuilder = JourneyPatternsApi(token: testToken).newCoverageRegionJourneyPatternsRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")

    var asyncResult:JourneyPatterns? = nil
    requestBuilder.get(completion: {
        (response: JourneyPatterns?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.journeyPatterns!.count > 0, "CoverageRegionJourneyPatternsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.journeyPatterns!.first != nil, "CoverageRegionJourneyPatternsRequestBuilder_get : first element")
}
    
        func test_CoverageRegionJourneyPatternsIdRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionJourneyPatternsIdRequestBuilder_get")
    let requestBuilder:CoverageRegionJourneyPatternsIdRequestBuilder = JourneyPatternsApi(token: testToken).newCoverageRegionJourneyPatternsIdRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withId("journey_pattern:0")

    var asyncResult:JourneyPatterns? = nil
    requestBuilder.get(completion: {
        (response: JourneyPatterns?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.journeyPatterns!.count > 0, "CoverageRegionJourneyPatternsIdRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.journeyPatterns!.first != nil, "CoverageRegionJourneyPatternsIdRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriJourneyPatternsRequestBuilder_get() {
    let expectation = self.expectation(description: "CoverageRegionUriJourneyPatternsRequestBuilder_get")
    let requestBuilder:CoverageRegionUriJourneyPatternsRequestBuilder = JourneyPatternsApi(token: testToken).newCoverageRegionUriJourneyPatternsRequestBuilder()

    // Test case parameters
    requestBuilder.withRegion("jdr")
    requestBuilder.withUri("lines/line:JDR:TGV")

    var asyncResult:JourneyPatterns? = nil
    requestBuilder.get(completion: {
        (response: JourneyPatterns?, error: Error?) -> Void in
        asyncResult = response
        expectation.fulfill()
    })

    waitForExpectations(timeout: 30)
    XCTAssertTrue(asyncResult!.journeyPatterns!.count > 0, "CoverageRegionUriJourneyPatternsRequestBuilder_get : size")
    XCTAssertTrue(asyncResult!.journeyPatterns!.first != nil, "CoverageRegionUriJourneyPatternsRequestBuilder_get : first element")
}
    
        func test_CoverageRegionUriJourneyPatternsIdRequestBuilder_get() {}

    
}
