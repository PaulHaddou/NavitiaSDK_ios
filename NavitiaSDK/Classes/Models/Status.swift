//
// Status.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import ObjectMapper


open class Status: JSONEncodable, Mappable {

    public var status: String?
    public var datasetCreatedAt: String?
    public var travelerProfiles: [TravelerProfiles]?
    public var isRealtimeLoaded: Bool?
    public var parameters: Parameters?
    public var krakenVersion: String?
    public var startProductionDate: String?
    public var isOpenService: Bool?
    public var nbThreads: Int32?
    public var isConnectedToRabbitmq: Bool?
    public var autocomplete: Autocomplete?
    public var dataVersion: Int32?
    public var lastLoadAt: String?
    public var endProductionDate: String?
    public var realtimeProxies: [String]?
    public var publicationDate: String?
    public var realtimeContributors: [String]?
    public var streetNetworks: [StreetNetwork]?
    public var lastLoadStatus: Bool?
    public var isOpenData: Bool?
    public var lastRtDataLoaded: String?

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        status <- map["status"]
        datasetCreatedAt <- map["dataset_created_at"]
        travelerProfiles <- map["traveler_profiles"]
        isRealtimeLoaded <- map["is_realtime_loaded"]
        parameters <- map["parameters"]
        krakenVersion <- map["kraken_version"]
        startProductionDate <- map["start_production_date"]
        isOpenService <- map["is_open_service"]
        nbThreads <- map["nb_threads"]
        isConnectedToRabbitmq <- map["is_connected_to_rabbitmq"]
        autocomplete <- map["autocomplete"]
        dataVersion <- map["data_version"]
        lastLoadAt <- map["last_load_at"]
        endProductionDate <- map["end_production_date"]
        realtimeProxies <- map["realtime_proxies"]
        publicationDate <- map["publication_date"]
        realtimeContributors <- map["realtime_contributors"]
        streetNetworks <- map["street_networks"]
        lastLoadStatus <- map["last_load_status"]
        isOpenData <- map["is_open_data"]
        lastRtDataLoaded <- map["last_rt_data_loaded"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["status"] = self.status
        nillableDictionary["dataset_created_at"] = self.datasetCreatedAt
        nillableDictionary["traveler_profiles"] = self.travelerProfiles?.encodeToJSON()
        nillableDictionary["is_realtime_loaded"] = self.isRealtimeLoaded
        nillableDictionary["parameters"] = self.parameters?.encodeToJSON()
        nillableDictionary["kraken_version"] = self.krakenVersion
        nillableDictionary["start_production_date"] = self.startProductionDate
        nillableDictionary["is_open_service"] = self.isOpenService
        nillableDictionary["nb_threads"] = self.nbThreads?.encodeToJSON()
        nillableDictionary["is_connected_to_rabbitmq"] = self.isConnectedToRabbitmq
        nillableDictionary["autocomplete"] = self.autocomplete?.encodeToJSON()
        nillableDictionary["data_version"] = self.dataVersion?.encodeToJSON()
        nillableDictionary["last_load_at"] = self.lastLoadAt
        nillableDictionary["end_production_date"] = self.endProductionDate
        nillableDictionary["realtime_proxies"] = self.realtimeProxies?.encodeToJSON()
        nillableDictionary["publication_date"] = self.publicationDate
        nillableDictionary["realtime_contributors"] = self.realtimeContributors?.encodeToJSON()
        nillableDictionary["street_networks"] = self.streetNetworks?.encodeToJSON()
        nillableDictionary["last_load_status"] = self.lastLoadStatus
        nillableDictionary["is_open_data"] = self.isOpenData
        nillableDictionary["last_rt_data_loaded"] = self.lastRtDataLoaded

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
