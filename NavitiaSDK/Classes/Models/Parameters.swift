//
// Parameters.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import ObjectMapper


open class Parameters: JSONEncodable, Mappable {

    public var minCar: Int32?
    public var maxDuration: Int32?
    public var journeyOrder: String?
    public var minTcWithBss: Int32?
    public var maxBssDurationToPt: Int32?
    public var maxNbTransfers: Int32?
    public var bikeSpeed: Float?
    public var walkingTransferPenalty: Int32?
    public var maxAdditionalConnections: Int32?
    public var walkingSpeed: Float?
    public var maxDurationFallbackMode: String?
    public var priority: Int32?
    public var carSpeed: Float?
    public var minTcWithCar: Int32?
    public var minTcWithBike: Int32?
    public var successivePhysicalModeToLimitId: String?
    public var minBike: Int32?
    public var maxWalkingDurationToPt: Int32?
    public var nightBusFilterBaseFactor: Int32?
    public var maxBikeDurationToPt: Int32?
    public var maxDurationCriteria: String?
    public var bssProvider: Bool?
    public var scenario: String?
    public var maxCarDurationToPt: Int32?
    public var minBss: Int32?
    public var minDurationTooLongJourney: Int32?
    public var nightBusFilterMaxFactor: Float?
    public var factorTooLongJourney: Int32?
    public var bssSpeed: Float?

    public init() {}
    required public init?(map: Map) {

    }


    public func mapping(map: Map) {
        minCar <- map["min_car"]
        maxDuration <- map["max_duration"]
        journeyOrder <- map["journey_order"]
        minTcWithBss <- map["min_tc_with_bss"]
        maxBssDurationToPt <- map["max_bss_duration_to_pt"]
        maxNbTransfers <- map["max_nb_transfers"]
        bikeSpeed <- map["bike_speed"]
        walkingTransferPenalty <- map["walking_transfer_penalty"]
        maxAdditionalConnections <- map["max_additional_connections"]
        walkingSpeed <- map["walking_speed"]
        maxDurationFallbackMode <- map["max_duration_fallback_mode"]
        priority <- map["priority"]
        carSpeed <- map["car_speed"]
        minTcWithCar <- map["min_tc_with_car"]
        minTcWithBike <- map["min_tc_with_bike"]
        successivePhysicalModeToLimitId <- map["successive_physical_mode_to_limit_id"]
        minBike <- map["min_bike"]
        maxWalkingDurationToPt <- map["max_walking_duration_to_pt"]
        nightBusFilterBaseFactor <- map["night_bus_filter_base_factor"]
        maxBikeDurationToPt <- map["max_bike_duration_to_pt"]
        maxDurationCriteria <- map["max_duration_criteria"]
        bssProvider <- map["bss_provider"]
        scenario <- map["scenario"]
        maxCarDurationToPt <- map["max_car_duration_to_pt"]
        minBss <- map["min_bss"]
        minDurationTooLongJourney <- map["min_duration_too_long_journey"]
        nightBusFilterMaxFactor <- map["night_bus_filter_max_factor"]
        factorTooLongJourney <- map["factor_too_long_journey"]
        bssSpeed <- map["bss_speed"]
    }

    // MARK: JSONEncodable
    open func encodeToJSON() -> Any {
        var nillableDictionary = [String:Any?]()
        nillableDictionary["min_car"] = self.minCar?.encodeToJSON()
        nillableDictionary["max_duration"] = self.maxDuration?.encodeToJSON()
        nillableDictionary["journey_order"] = self.journeyOrder
        nillableDictionary["min_tc_with_bss"] = self.minTcWithBss?.encodeToJSON()
        nillableDictionary["max_bss_duration_to_pt"] = self.maxBssDurationToPt?.encodeToJSON()
        nillableDictionary["max_nb_transfers"] = self.maxNbTransfers?.encodeToJSON()
        nillableDictionary["bike_speed"] = self.bikeSpeed
        nillableDictionary["walking_transfer_penalty"] = self.walkingTransferPenalty?.encodeToJSON()
        nillableDictionary["max_additional_connections"] = self.maxAdditionalConnections?.encodeToJSON()
        nillableDictionary["walking_speed"] = self.walkingSpeed
        nillableDictionary["max_duration_fallback_mode"] = self.maxDurationFallbackMode
        nillableDictionary["priority"] = self.priority?.encodeToJSON()
        nillableDictionary["car_speed"] = self.carSpeed
        nillableDictionary["min_tc_with_car"] = self.minTcWithCar?.encodeToJSON()
        nillableDictionary["min_tc_with_bike"] = self.minTcWithBike?.encodeToJSON()
        nillableDictionary["successive_physical_mode_to_limit_id"] = self.successivePhysicalModeToLimitId
        nillableDictionary["min_bike"] = self.minBike?.encodeToJSON()
        nillableDictionary["max_walking_duration_to_pt"] = self.maxWalkingDurationToPt?.encodeToJSON()
        nillableDictionary["night_bus_filter_base_factor"] = self.nightBusFilterBaseFactor?.encodeToJSON()
        nillableDictionary["max_bike_duration_to_pt"] = self.maxBikeDurationToPt?.encodeToJSON()
        nillableDictionary["max_duration_criteria"] = self.maxDurationCriteria
        nillableDictionary["bss_provider"] = self.bssProvider
        nillableDictionary["scenario"] = self.scenario
        nillableDictionary["max_car_duration_to_pt"] = self.maxCarDurationToPt?.encodeToJSON()
        nillableDictionary["min_bss"] = self.minBss?.encodeToJSON()
        nillableDictionary["min_duration_too_long_journey"] = self.minDurationTooLongJourney?.encodeToJSON()
        nillableDictionary["night_bus_filter_max_factor"] = self.nightBusFilterMaxFactor
        nillableDictionary["factor_too_long_journey"] = self.factorTooLongJourney?.encodeToJSON()
        nillableDictionary["bss_speed"] = self.bssSpeed

        let dictionary: [String:Any] = APIHelper.rejectNil(nillableDictionary) ?? [:]
        return dictionary
    }
}
