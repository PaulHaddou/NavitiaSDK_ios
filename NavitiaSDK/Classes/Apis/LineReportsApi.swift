//
// LineReportsApi.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import AlamofireObjectMapper


open class CoverageRegionLineReportsRequestBuilder: NSObject {
    let currentApi: LineReportsApi

    var region:String? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var startPage:Int32? = nil
    var forbiddenUris:[String]? = nil
    var disableGeojson:Bool? = nil

    public init(currentApi: LineReportsApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionLineReportsRequestBuilder {
        self.region = region
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionLineReportsRequestBuilder {
        self.depth = depth
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionLineReportsRequestBuilder {
        self.count = count
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionLineReportsRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionLineReportsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionLineReportsRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/line_reports"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "start_page": self.startPage?.encodeToJSON(), 
            "forbidden_uris[]": self.forbiddenUris, 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: LineReports?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<LineReports>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriLineReportsRequestBuilder: NSObject {
    let currentApi: LineReportsApi

    var region:String? = nil
    var uri:String? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var startPage:Int32? = nil
    var forbiddenUris:[String]? = nil
    var disableGeojson:Bool? = nil

    public init(currentApi: LineReportsApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionUriLineReportsRequestBuilder {
        self.region = region
        return self
    }
    open func withUri(_ uri: String) -> CoverageRegionUriLineReportsRequestBuilder {
        self.uri = uri
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionUriLineReportsRequestBuilder {
        self.depth = depth
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionUriLineReportsRequestBuilder {
        self.count = count
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionUriLineReportsRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionUriLineReportsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionUriLineReportsRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/line_reports"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{uri}", with: "\(self.uri!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "start_page": self.startPage?.encodeToJSON(), 
            "forbidden_uris[]": self.forbiddenUris, 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: LineReports?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<LineReports>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}



open class LineReportsApi: APIBase {
    let token: String

    public init(token: String) {
        self.token = token
    }

    public func newCoverageRegionLineReportsRequestBuilder() -> CoverageRegionLineReportsRequestBuilder {
        return CoverageRegionLineReportsRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriLineReportsRequestBuilder() -> CoverageRegionUriLineReportsRequestBuilder {
        return CoverageRegionUriLineReportsRequestBuilder(currentApi: self)
    }
}
