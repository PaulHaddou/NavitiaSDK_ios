//
// EquipmentReportsApi.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class CoordLonLatEquipmentReportsRequestBuilder: NSObject {
    let currentApi: EquipmentReportsApi

    var lat:Double? = nil
    var lon:Double? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var filter:String? = nil
    var startPage:Int32? = nil
    var forbiddenUris:[String]? = nil
    var debugURL: String? = nil

    public init(currentApi: EquipmentReportsApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double?) -> CoordLonLatEquipmentReportsRequestBuilder {
        self.lat = lat
        
        return self
    }
    open func withLon(_ lon: Double?) -> CoordLonLatEquipmentReportsRequestBuilder {
        self.lon = lon
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoordLonLatEquipmentReportsRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoordLonLatEquipmentReportsRequestBuilder {
        self.count = count
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoordLonLatEquipmentReportsRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoordLonLatEquipmentReportsRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoordLonLatEquipmentReportsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoordLonLatEquipmentReportsRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coord/{lon};{lat}/equipment_reports"

        if let lat = lat {
            let latPreEscape: String = "\(lat)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if let lon = lon {
            let lonPreEscape: String = "\(lon)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "filter": self.filter, 
            "start_page": self.startPage?.encodeToJSON(), 
            "forbidden_uris[]": self.forbiddenUris
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: EquipmentReports?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<EquipmentReports>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoordsLonLatEquipmentReportsRequestBuilder: NSObject {
    let currentApi: EquipmentReportsApi

    var lat:Double? = nil
    var lon:Double? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var filter:String? = nil
    var startPage:Int32? = nil
    var forbiddenUris:[String]? = nil
    var debugURL: String? = nil

    public init(currentApi: EquipmentReportsApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double?) -> CoordsLonLatEquipmentReportsRequestBuilder {
        self.lat = lat
        
        return self
    }
    open func withLon(_ lon: Double?) -> CoordsLonLatEquipmentReportsRequestBuilder {
        self.lon = lon
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoordsLonLatEquipmentReportsRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoordsLonLatEquipmentReportsRequestBuilder {
        self.count = count
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoordsLonLatEquipmentReportsRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoordsLonLatEquipmentReportsRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoordsLonLatEquipmentReportsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoordsLonLatEquipmentReportsRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coords/{lon};{lat}/equipment_reports"

        if let lat = lat {
            let latPreEscape: String = "\(lat)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if let lon = lon {
            let lonPreEscape: String = "\(lon)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "filter": self.filter, 
            "start_page": self.startPage?.encodeToJSON(), 
            "forbidden_uris[]": self.forbiddenUris
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: EquipmentReports?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<EquipmentReports>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatEquipmentReportsRequestBuilder: NSObject {
    let currentApi: EquipmentReportsApi

    var lat:Double? = nil
    var lon:Double? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var filter:String? = nil
    var startPage:Int32? = nil
    var forbiddenUris:[String]? = nil
    var debugURL: String? = nil

    public init(currentApi: EquipmentReportsApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double?) -> CoverageLonLatEquipmentReportsRequestBuilder {
        self.lat = lat
        
        return self
    }
    open func withLon(_ lon: Double?) -> CoverageLonLatEquipmentReportsRequestBuilder {
        self.lon = lon
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageLonLatEquipmentReportsRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageLonLatEquipmentReportsRequestBuilder {
        self.count = count
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageLonLatEquipmentReportsRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageLonLatEquipmentReportsRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageLonLatEquipmentReportsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageLonLatEquipmentReportsRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/equipment_reports"

        if let lat = lat {
            let latPreEscape: String = "\(lat)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if let lon = lon {
            let lonPreEscape: String = "\(lon)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "filter": self.filter, 
            "start_page": self.startPage?.encodeToJSON(), 
            "forbidden_uris[]": self.forbiddenUris
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: EquipmentReports?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<EquipmentReports>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatUriEquipmentReportsRequestBuilder: NSObject {
    let currentApi: EquipmentReportsApi

    var lat:Double? = nil
    var lon:Double? = nil
    var uri:String? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var filter:String? = nil
    var startPage:Int32? = nil
    var forbiddenUris:[String]? = nil
    var debugURL: String? = nil

    public init(currentApi: EquipmentReportsApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double?) -> CoverageLonLatUriEquipmentReportsRequestBuilder {
        self.lat = lat
        
        return self
    }
    open func withLon(_ lon: Double?) -> CoverageLonLatUriEquipmentReportsRequestBuilder {
        self.lon = lon
        
        return self
    }
    open func withUri(_ uri: String?) -> CoverageLonLatUriEquipmentReportsRequestBuilder {
        self.uri = uri
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageLonLatUriEquipmentReportsRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageLonLatUriEquipmentReportsRequestBuilder {
        self.count = count
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageLonLatUriEquipmentReportsRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageLonLatUriEquipmentReportsRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageLonLatUriEquipmentReportsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageLonLatUriEquipmentReportsRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/{uri}/equipment_reports"

        if let lat = lat {
            let latPreEscape: String = "\(lat)"
            let latPostEscape: String = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        }

        if let lon = lon {
            let lonPreEscape: String = "\(lon)"
            let lonPostEscape: String = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        }

        if let uri = uri {
            let uriPreEscape: String = "\(uri)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "filter": self.filter, 
            "start_page": self.startPage?.encodeToJSON(), 
            "forbidden_uris[]": self.forbiddenUris
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: EquipmentReports?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<EquipmentReports>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionEquipmentReportsRequestBuilder: NSObject {
    let currentApi: EquipmentReportsApi

    var region:String? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var filter:String? = nil
    var startPage:Int32? = nil
    var forbiddenUris:[String]? = nil
    var debugURL: String? = nil

    public init(currentApi: EquipmentReportsApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String?) -> CoverageRegionEquipmentReportsRequestBuilder {
        self.region = region
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageRegionEquipmentReportsRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageRegionEquipmentReportsRequestBuilder {
        self.count = count
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageRegionEquipmentReportsRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageRegionEquipmentReportsRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageRegionEquipmentReportsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageRegionEquipmentReportsRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/equipment_reports"

        if let region = region {
            let regionPreEscape: String = "\(region)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "filter": self.filter, 
            "start_page": self.startPage?.encodeToJSON(), 
            "forbidden_uris[]": self.forbiddenUris
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: EquipmentReports?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<EquipmentReports>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriEquipmentReportsRequestBuilder: NSObject {
    let currentApi: EquipmentReportsApi

    var region:String? = nil
    var uri:String? = nil
    var depth:Int32? = nil
    var count:Int32? = nil
    var filter:String? = nil
    var startPage:Int32? = nil
    var forbiddenUris:[String]? = nil
    var debugURL: String? = nil

    public init(currentApi: EquipmentReportsApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String?) -> CoverageRegionUriEquipmentReportsRequestBuilder {
        self.region = region
        
        return self
    }
    open func withUri(_ uri: String?) -> CoverageRegionUriEquipmentReportsRequestBuilder {
        self.uri = uri
        
        return self
    }
    open func withDepth(_ depth: Int32?) -> CoverageRegionUriEquipmentReportsRequestBuilder {
        self.depth = depth
        
        return self
    }
    open func withCount(_ count: Int32?) -> CoverageRegionUriEquipmentReportsRequestBuilder {
        self.count = count
        
        return self
    }
    open func withFilter(_ filter: String?) -> CoverageRegionUriEquipmentReportsRequestBuilder {
        self.filter = filter
        
        return self
    }
    open func withStartPage(_ startPage: Int32?) -> CoverageRegionUriEquipmentReportsRequestBuilder {
        self.startPage = startPage
        
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]?) -> CoverageRegionUriEquipmentReportsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        
        return self
    }



    open func withDebugURL(_ debugURL: String?) -> CoverageRegionUriEquipmentReportsRequestBuilder {
        self.debugURL = debugURL
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/equipment_reports"

        if let region = region {
            let regionPreEscape: String = "\(region)"
            let regionPostEscape: String = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        }

        if let uri = uri {
            let uriPreEscape: String = "\(uri)"
            let uriPostEscape: String = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
            path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        }

        let URLString = String(format: "%@%@", NavitiaSDKAPI.basePath, path)
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "depth": self.depth?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "filter": self.filter, 
            "start_page": self.startPage?.encodeToJSON(), 
            "forbidden_uris[]": self.forbiddenUris
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)
        url?.percentEncodedQuery = url?.percentEncodedQuery?.replacingOccurrences(of: "+", with: "%2B")

        return (debugURL ?? url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: EquipmentReports?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<EquipmentReports>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}



open class EquipmentReportsApi: APIBase {
    let token: String

    public init(token: String) {
        self.token = token
    }

    public func newCoordLonLatEquipmentReportsRequestBuilder() -> CoordLonLatEquipmentReportsRequestBuilder {
        return CoordLonLatEquipmentReportsRequestBuilder(currentApi: self)
    }
    public func newCoordsLonLatEquipmentReportsRequestBuilder() -> CoordsLonLatEquipmentReportsRequestBuilder {
        return CoordsLonLatEquipmentReportsRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatEquipmentReportsRequestBuilder() -> CoverageLonLatEquipmentReportsRequestBuilder {
        return CoverageLonLatEquipmentReportsRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatUriEquipmentReportsRequestBuilder() -> CoverageLonLatUriEquipmentReportsRequestBuilder {
        return CoverageLonLatUriEquipmentReportsRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionEquipmentReportsRequestBuilder() -> CoverageRegionEquipmentReportsRequestBuilder {
        return CoverageRegionEquipmentReportsRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriEquipmentReportsRequestBuilder() -> CoverageRegionUriEquipmentReportsRequestBuilder {
        return CoverageRegionUriEquipmentReportsRequestBuilder(currentApi: self)
    }
}
