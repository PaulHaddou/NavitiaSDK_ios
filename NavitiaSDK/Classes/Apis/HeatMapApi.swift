//
// HeatMapApi.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import AlamofireObjectMapper


open class CoverageRegionHeatMapsRequestBuilder: NSObject {
    let currentApi: HeatMapApi

    /**
    * enum for parameter datetimeRepresents
    */
    public enum DatetimeRepresents_getCoverageRegionHeatMaps: String { 
        case arrival = "arrival"
        case departure = "departure"
    }
    /**
    * enum for parameter firstSectionMode
    */
    public enum FirstSectionMode_getCoverageRegionHeatMaps: String { 
        case walking = "walking"
        case car = "car"
        case bike = "bike"
        case bss = "bss"
    }
    /**
    * enum for parameter lastSectionMode
    */
    public enum LastSectionMode_getCoverageRegionHeatMaps: String { 
        case walking = "walking"
        case car = "car"
        case bike = "bike"
        case bss = "bss"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness_getCoverageRegionHeatMaps: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter travelerType
    */
    public enum TravelerType_getCoverageRegionHeatMaps: String { 
        case cyclist = "cyclist"
        case luggage = "luggage"
        case wheelchair = "wheelchair"
        case standard = "standard"
        case motorist = "motorist"
        case fastWalker = "fast_walker"
        case slowWalker = "slow_walker"
    }
    /**
    * enum for parameter directPath
    */
    public enum DirectPath_getCoverageRegionHeatMaps: String { 
        case indifferent = "indifferent"
        case only = "only"
        case _none = "none"
    }
    var region: String? = nil
    var from: String? = nil
    var to: String? = nil
    var datetime: Date? = nil
    var datetimeRepresents: DatetimeRepresents_getCoverageRegionHeatMaps? = nil
    var maxNbTransfers: Int32? = nil
    var minNbTransfers: Int32? = nil
    var firstSectionMode: [String]? = nil
    var lastSectionMode: [String]? = nil
    var maxDurationToPt: Int32? = nil
    var maxWalkingDurationToPt: Int32? = nil
    var maxBikeDurationToPt: Int32? = nil
    var maxBssDurationToPt: Int32? = nil
    var maxCarDurationToPt: Int32? = nil
    var walkingSpeed: Float? = nil
    var bikeSpeed: Float? = nil
    var bssSpeed: Float? = nil
    var carSpeed: Float? = nil
    var forbiddenUris: [String]? = nil
    var allowedId: [String]? = nil
    var disruptionActive: Bool? = nil
    var dataFreshness: DataFreshness_getCoverageRegionHeatMaps? = nil
    var maxDuration: Int32? = nil
    var wheelchair: Bool? = nil
    var travelerType: TravelerType_getCoverageRegionHeatMaps? = nil
    var directPath: DirectPath_getCoverageRegionHeatMaps? = nil
    var resolution: Int32? = nil

    public init(currentApi: HeatMapApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionHeatMapsRequestBuilder {
        self.region = region
        return self
    }
    open func withFrom(_ from: String) -> CoverageRegionHeatMapsRequestBuilder {
        self.from = from
        return self
    }
    open func withTo(_ to: String) -> CoverageRegionHeatMapsRequestBuilder {
        self.to = to
        return self
    }
    open func withDatetime(_ datetime: Date) -> CoverageRegionHeatMapsRequestBuilder {
        self.datetime = datetime
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresents: DatetimeRepresents_getCoverageRegionHeatMaps) -> CoverageRegionHeatMapsRequestBuilder {
        self.datetimeRepresents = datetimeRepresents
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresentsValue: String) -> CoverageRegionHeatMapsRequestBuilder {
        return withDatetimeRepresents(DatetimeRepresents_getCoverageRegionHeatMaps(rawValue: datetimeRepresentsValue)!);
    }
    open func withMaxNbTransfers(_ maxNbTransfers: Int32) -> CoverageRegionHeatMapsRequestBuilder {
        self.maxNbTransfers = maxNbTransfers
        return self
    }
    open func withMinNbTransfers(_ minNbTransfers: Int32) -> CoverageRegionHeatMapsRequestBuilder {
        self.minNbTransfers = minNbTransfers
        return self
    }
    open func withFirstSectionMode(_ firstSectionMode: [String]) -> CoverageRegionHeatMapsRequestBuilder {
        self.firstSectionMode = firstSectionMode
        return self
    }
    open func withFirstSectionMode(_ firstSectionModeValue: String) -> CoverageRegionHeatMapsRequestBuilder {
        return withFirstSectionMode([FirstSectionMode]_getCoverageRegionHeatMaps(rawValue: firstSectionModeValue)!);
    }
    open func withLastSectionMode(_ lastSectionMode: [String]) -> CoverageRegionHeatMapsRequestBuilder {
        self.lastSectionMode = lastSectionMode
        return self
    }
    open func withLastSectionMode(_ lastSectionModeValue: String) -> CoverageRegionHeatMapsRequestBuilder {
        return withLastSectionMode([LastSectionMode]_getCoverageRegionHeatMaps(rawValue: lastSectionModeValue)!);
    }
    open func withMaxDurationToPt(_ maxDurationToPt: Int32) -> CoverageRegionHeatMapsRequestBuilder {
        self.maxDurationToPt = maxDurationToPt
        return self
    }
    open func withMaxWalkingDurationToPt(_ maxWalkingDurationToPt: Int32) -> CoverageRegionHeatMapsRequestBuilder {
        self.maxWalkingDurationToPt = maxWalkingDurationToPt
        return self
    }
    open func withMaxBikeDurationToPt(_ maxBikeDurationToPt: Int32) -> CoverageRegionHeatMapsRequestBuilder {
        self.maxBikeDurationToPt = maxBikeDurationToPt
        return self
    }
    open func withMaxBssDurationToPt(_ maxBssDurationToPt: Int32) -> CoverageRegionHeatMapsRequestBuilder {
        self.maxBssDurationToPt = maxBssDurationToPt
        return self
    }
    open func withMaxCarDurationToPt(_ maxCarDurationToPt: Int32) -> CoverageRegionHeatMapsRequestBuilder {
        self.maxCarDurationToPt = maxCarDurationToPt
        return self
    }
    open func withWalkingSpeed(_ walkingSpeed: Float) -> CoverageRegionHeatMapsRequestBuilder {
        self.walkingSpeed = walkingSpeed
        return self
    }
    open func withBikeSpeed(_ bikeSpeed: Float) -> CoverageRegionHeatMapsRequestBuilder {
        self.bikeSpeed = bikeSpeed
        return self
    }
    open func withBssSpeed(_ bssSpeed: Float) -> CoverageRegionHeatMapsRequestBuilder {
        self.bssSpeed = bssSpeed
        return self
    }
    open func withCarSpeed(_ carSpeed: Float) -> CoverageRegionHeatMapsRequestBuilder {
        self.carSpeed = carSpeed
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionHeatMapsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withAllowedId(_ allowedId: [String]) -> CoverageRegionHeatMapsRequestBuilder {
        self.allowedId = allowedId
        return self
    }
    open func withDisruptionActive(_ disruptionActive: Bool) -> CoverageRegionHeatMapsRequestBuilder {
        self.disruptionActive = disruptionActive
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness_getCoverageRegionHeatMaps) -> CoverageRegionHeatMapsRequestBuilder {
        self.dataFreshness = dataFreshness
        return self
    }
    open func withDataFreshness(_ dataFreshnessValue: String) -> CoverageRegionHeatMapsRequestBuilder {
        return withDataFreshness(DataFreshness_getCoverageRegionHeatMaps(rawValue: dataFreshnessValue)!);
    }
    open func withMaxDuration(_ maxDuration: Int32) -> CoverageRegionHeatMapsRequestBuilder {
        self.maxDuration = maxDuration
        return self
    }
    open func withWheelchair(_ wheelchair: Bool) -> CoverageRegionHeatMapsRequestBuilder {
        self.wheelchair = wheelchair
        return self
    }
    open func withTravelerType(_ travelerType: TravelerType_getCoverageRegionHeatMaps) -> CoverageRegionHeatMapsRequestBuilder {
        self.travelerType = travelerType
        return self
    }
    open func withTravelerType(_ travelerTypeValue: String) -> CoverageRegionHeatMapsRequestBuilder {
        return withTravelerType(TravelerType_getCoverageRegionHeatMaps(rawValue: travelerTypeValue)!);
    }
    open func withDirectPath(_ directPath: DirectPath_getCoverageRegionHeatMaps) -> CoverageRegionHeatMapsRequestBuilder {
        self.directPath = directPath
        return self
    }
    open func withDirectPath(_ directPathValue: String) -> CoverageRegionHeatMapsRequestBuilder {
        return withDirectPath(DirectPath_getCoverageRegionHeatMaps(rawValue: directPathValue)!);
    }
    open func withResolution(_ resolution: Int32) -> CoverageRegionHeatMapsRequestBuilder {
        self.resolution = resolution
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/heat_maps"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "from": self.from, 
            "to": self.to, 
            "datetime": self.datetime?.encodeToJSON(), 
            "datetime_represents": self.datetimeRepresents?.rawValue, 
            "max_nb_transfers": self.maxNbTransfers?.encodeToJSON(), 
            "min_nb_transfers": self.minNbTransfers?.encodeToJSON(), 
            "first_section_mode[]": self.firstSectionMode, 
            "last_section_mode[]": self.lastSectionMode, 
            "max_duration_to_pt": self.maxDurationToPt?.encodeToJSON(), 
            "max_walking_duration_to_pt": self.maxWalkingDurationToPt?.encodeToJSON(), 
            "max_bike_duration_to_pt": self.maxBikeDurationToPt?.encodeToJSON(), 
            "max_bss_duration_to_pt": self.maxBssDurationToPt?.encodeToJSON(), 
            "max_car_duration_to_pt": self.maxCarDurationToPt?.encodeToJSON(), 
            "walking_speed": self.walkingSpeed, 
            "bike_speed": self.bikeSpeed, 
            "bss_speed": self.bssSpeed, 
            "car_speed": self.carSpeed, 
            "forbidden_uris[]": self.forbiddenUris, 
            "allowed_id[]": self.allowedId, 
            "disruption_active": self.disruptionActive, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "max_duration": self.maxDuration?.encodeToJSON(), 
            "wheelchair": self.wheelchair, 
            "traveler_type": self.travelerType?.rawValue, 
            "direct_path": self.directPath?.rawValue, 
            "resolution": self.resolution?.encodeToJSON()
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: HeatMap1?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<HeatMap1>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}



open class HeatMapApi: APIBase {
    let token: String

    public init(token: String) {
        self.token = token
    }

    public func newCoverageRegionHeatMapsRequestBuilder() -> CoverageRegionHeatMapsRequestBuilder {
        return CoverageRegionHeatMapsRequestBuilder(currentApi: self)
    }
}
