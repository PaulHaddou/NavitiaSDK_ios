//
// PoiTypesApi.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import AlamofireObjectMapper


open class CoverageLonLatPoiTypesRequestBuilder: NSObject {
    let currentApi: PoiTypesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageLonLatPoiTypes: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat: Double? = nil
    var lon: Double? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageLonLatPoiTypes? = nil
    var distance: Int32? = nil
    var since: Date? = nil
    var until: Date? = nil
    var disableGeojson: Bool? = nil
    var filter: String? = nil

    public init(currentApi: PoiTypesApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatPoiTypesRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatPoiTypesRequestBuilder {
        self.lon = lon
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatPoiTypesRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatPoiTypesRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatPoiTypesRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatPoiTypesRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatPoiTypesRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatPoiTypesRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatPoiTypesRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatPoiTypesRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageLonLatPoiTypes) -> CoverageLonLatPoiTypesRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageLonLatPoiTypesRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageLonLatPoiTypes(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatPoiTypesRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageLonLatPoiTypesRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageLonLatPoiTypesRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatPoiTypesRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageLonLatPoiTypesRequestBuilder {
        self.filter = filter
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/poi_types"
        path = path.replacingOccurrences(of: "{lat}", with: "\(self.lat!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{lon}", with: "\(self.lon!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: PoiTypes?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<PoiTypes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatPoiTypesIdRequestBuilder: NSObject {
    let currentApi: PoiTypesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageLonLatPoiTypesId: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat: Double? = nil
    var lon: Double? = nil
    var id: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageLonLatPoiTypesId? = nil
    var distance: Int32? = nil
    var since: Date? = nil
    var until: Date? = nil
    var disableGeojson: Bool? = nil

    public init(currentApi: PoiTypesApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.lon = lon
        return self
    }
    open func withId(_ id: String) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageLonLatPoiTypesId) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageLonLatPoiTypesIdRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageLonLatPoiTypesId(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatPoiTypesIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/poi_types/{id}"
        path = path.replacingOccurrences(of: "{lat}", with: "\(self.lat!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{lon}", with: "\(self.lon!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(self.id!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: PoiTypes?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<PoiTypes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatUriPoiTypesRequestBuilder: NSObject {
    let currentApi: PoiTypesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageLonLatUriPoiTypes: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat: Double? = nil
    var lon: Double? = nil
    var uri: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageLonLatUriPoiTypes? = nil
    var distance: Int32? = nil
    var since: Date? = nil
    var until: Date? = nil
    var disableGeojson: Bool? = nil
    var filter: String? = nil

    public init(currentApi: PoiTypesApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.lon = lon
        return self
    }
    open func withUri(_ uri: String) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.uri = uri
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageLonLatUriPoiTypes) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageLonLatUriPoiTypesRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageLonLatUriPoiTypes(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageLonLatUriPoiTypesRequestBuilder {
        self.filter = filter
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/{uri}/poi_types"
        path = path.replacingOccurrences(of: "{lat}", with: "\(self.lat!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{lon}", with: "\(self.lon!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{uri}", with: "\(self.uri!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: PoiTypes?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<PoiTypes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatUriPoiTypesIdRequestBuilder: NSObject {
    let currentApi: PoiTypesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageLonLatUriPoiTypesId: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat: Double? = nil
    var lon: Double? = nil
    var uri: String? = nil
    var id: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageLonLatUriPoiTypesId? = nil
    var distance: Int32? = nil
    var since: Date? = nil
    var until: Date? = nil
    var disableGeojson: Bool? = nil

    public init(currentApi: PoiTypesApi) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.lon = lon
        return self
    }
    open func withUri(_ uri: String) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.uri = uri
        return self
    }
    open func withId(_ id: String) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageLonLatUriPoiTypesId) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageLonLatUriPoiTypesId(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/{uri}/poi_types/{id}"
        path = path.replacingOccurrences(of: "{lat}", with: "\(self.lat!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{lon}", with: "\(self.lon!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{uri}", with: "\(self.uri!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(self.id!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: PoiTypes?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<PoiTypes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionPoiTypesRequestBuilder: NSObject {
    let currentApi: PoiTypesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageRegionPoiTypes: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageRegionPoiTypes? = nil
    var distance: Int32? = nil
    var since: Date? = nil
    var until: Date? = nil
    var disableGeojson: Bool? = nil
    var filter: String? = nil

    public init(currentApi: PoiTypesApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionPoiTypesRequestBuilder {
        self.region = region
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionPoiTypesRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionPoiTypesRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionPoiTypesRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionPoiTypesRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionPoiTypesRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionPoiTypesRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionPoiTypesRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionPoiTypesRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageRegionPoiTypes) -> CoverageRegionPoiTypesRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageRegionPoiTypesRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageRegionPoiTypes(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionPoiTypesRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageRegionPoiTypesRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageRegionPoiTypesRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionPoiTypesRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageRegionPoiTypesRequestBuilder {
        self.filter = filter
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/poi_types"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: PoiTypes?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<PoiTypes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionPoiTypesIdRequestBuilder: NSObject {
    let currentApi: PoiTypesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageRegionPoiTypesId: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region: String? = nil
    var id: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageRegionPoiTypesId? = nil
    var distance: Int32? = nil
    var since: Date? = nil
    var until: Date? = nil
    var disableGeojson: Bool? = nil

    public init(currentApi: PoiTypesApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.region = region
        return self
    }
    open func withId(_ id: String) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageRegionPoiTypesId) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageRegionPoiTypesIdRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageRegionPoiTypesId(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionPoiTypesIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/poi_types/{id}"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(self.id!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: PoiTypes?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<PoiTypes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriPoiTypesRequestBuilder: NSObject {
    let currentApi: PoiTypesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageRegionUriPoiTypes: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region: String? = nil
    var uri: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageRegionUriPoiTypes? = nil
    var distance: Int32? = nil
    var since: Date? = nil
    var until: Date? = nil
    var disableGeojson: Bool? = nil
    var filter: String? = nil

    public init(currentApi: PoiTypesApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.region = region
        return self
    }
    open func withUri(_ uri: String) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.uri = uri
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageRegionUriPoiTypes) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageRegionUriPoiTypesRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageRegionUriPoiTypes(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageRegionUriPoiTypesRequestBuilder {
        self.filter = filter
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/poi_types"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{uri}", with: "\(self.uri!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: PoiTypes?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<PoiTypes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriPoiTypesIdRequestBuilder: NSObject {
    let currentApi: PoiTypesApi

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageRegionUriPoiTypesId: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region: String? = nil
    var uri: String? = nil
    var id: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageRegionUriPoiTypesId? = nil
    var distance: Int32? = nil
    var since: Date? = nil
    var until: Date? = nil
    var disableGeojson: Bool? = nil

    public init(currentApi: PoiTypesApi) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.region = region
        return self
    }
    open func withUri(_ uri: String) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.uri = uri
        return self
    }
    open func withId(_ id: String) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageRegionUriPoiTypesId) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageRegionUriPoiTypesId(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: Date) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: Date) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionUriPoiTypesIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/poi_types/{id}"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{uri}", with: "\(self.uri!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(self.id!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since?.encodeToJSON(), 
            "until": self.until?.encodeToJSON(), 
            "disable_geojson": self.disableGeojson
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: PoiTypes?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<PoiTypes>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}



open class PoiTypesApi: APIBase {
    let token: String

    public init(token: String) {
        self.token = token
    }

    public func newCoverageLonLatPoiTypesRequestBuilder() -> CoverageLonLatPoiTypesRequestBuilder {
        return CoverageLonLatPoiTypesRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatPoiTypesIdRequestBuilder() -> CoverageLonLatPoiTypesIdRequestBuilder {
        return CoverageLonLatPoiTypesIdRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatUriPoiTypesRequestBuilder() -> CoverageLonLatUriPoiTypesRequestBuilder {
        return CoverageLonLatUriPoiTypesRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatUriPoiTypesIdRequestBuilder() -> CoverageLonLatUriPoiTypesIdRequestBuilder {
        return CoverageLonLatUriPoiTypesIdRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionPoiTypesRequestBuilder() -> CoverageRegionPoiTypesRequestBuilder {
        return CoverageRegionPoiTypesRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionPoiTypesIdRequestBuilder() -> CoverageRegionPoiTypesIdRequestBuilder {
        return CoverageRegionPoiTypesIdRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriPoiTypesRequestBuilder() -> CoverageRegionUriPoiTypesRequestBuilder {
        return CoverageRegionUriPoiTypesRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriPoiTypesIdRequestBuilder() -> CoverageRegionUriPoiTypesIdRequestBuilder {
        return CoverageRegionUriPoiTypesIdRequestBuilder(currentApi: self)
    }
}
