//
// JourneysAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import AlamofireObjectMapper


open class CoverageLonLatJourneysRequestBuilder: NSObject {
    let currentApi: JourneysAPI

    /**
    * enum for parameter datetimeRepresents
    */
    public enum DatetimeRepresents_getCoverageLonLatJourneys: String { 
        case arrival = "arrival"
        case departure = "departure"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness_getCoverageLonLatJourneys: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter travelerType
    */
    public enum TravelerType_getCoverageLonLatJourneys: String { 
        case cyclist = "cyclist"
        case luggage = "luggage"
        case wheelchair = "wheelchair"
        case standard = "standard"
        case motorist = "motorist"
        case fastWalker = "fast_walker"
        case slowWalker = "slow_walker"
    }
    /**
    * enum for parameter directPath
    */
    public enum DirectPath_getCoverageLonLatJourneys: String { 
        case indifferent = "indifferent"
        case only = "only"
        case _none = "none"
    }
    var lat: Double? = nil
    var lon: Double? = nil
    var from: String? = nil
    var to: String? = nil
    var datetime: String? = nil
    var datetimeRepresents: DatetimeRepresents_getCoverageLonLatJourneys? = nil
    var maxNbTransfers: Int32? = nil
    var minNbTransfers: Int32? = nil
    var firstSectionMode: [String]? = nil
    var lastSectionMode: [String]? = nil
    var maxDurationToPt: Int32? = nil
    var maxWalkingDurationToPt: Int32? = nil
    var maxBikeDurationToPt: Int32? = nil
    var maxBssDurationToPt: Int32? = nil
    var maxCarDurationToPt: Int32? = nil
    var walkingSpeed: Float? = nil
    var bikeSpeed: Float? = nil
    var bssSpeed: Float? = nil
    var carSpeed: Float? = nil
    var forbiddenUris: [String]? = nil
    var allowedId: [String]? = nil
    var disruptionActive: Bool? = nil
    var dataFreshness: DataFreshness_getCoverageLonLatJourneys? = nil
    var maxDuration: Int32? = nil
    var wheelchair: Bool? = nil
    var travelerType: TravelerType_getCoverageLonLatJourneys? = nil
    var directPath: DirectPath_getCoverageLonLatJourneys? = nil
    var count: Int32? = nil
    var isJourneySchedules: Bool? = nil
    var minNbJourneys: Int32? = nil
    var maxNbJourneys: Int32? = nil
    var bssStands: Bool? = nil

    public init(currentApi: JourneysAPI) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatJourneysRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatJourneysRequestBuilder {
        self.lon = lon
        return self
    }
    open func withFrom(_ from: String) -> CoverageLonLatJourneysRequestBuilder {
        self.from = from
        return self
    }
    open func withTo(_ to: String) -> CoverageLonLatJourneysRequestBuilder {
        self.to = to
        return self
    }
    open func withDatetime(_ datetime: String) -> CoverageLonLatJourneysRequestBuilder {
        self.datetime = datetime
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresents: DatetimeRepresents_getCoverageLonLatJourneys) -> CoverageLonLatJourneysRequestBuilder {
        self.datetimeRepresents = datetimeRepresents
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresentsValue: String) -> CoverageLonLatJourneysRequestBuilder {
        return withDatetimeRepresents(DatetimeRepresents_getCoverageLonLatJourneys(rawValue: datetimeRepresentsValue)!);
    }
    open func withMaxNbTransfers(_ maxNbTransfers: Int32) -> CoverageLonLatJourneysRequestBuilder {
        self.maxNbTransfers = maxNbTransfers
        return self
    }
    open func withMinNbTransfers(_ minNbTransfers: Int32) -> CoverageLonLatJourneysRequestBuilder {
        self.minNbTransfers = minNbTransfers
        return self
    }
    open func withFirstSectionMode(_ firstSectionMode: [String]) -> CoverageLonLatJourneysRequestBuilder {
        self.firstSectionMode = firstSectionMode
        return self
    }
    open func withLastSectionMode(_ lastSectionMode: [String]) -> CoverageLonLatJourneysRequestBuilder {
        self.lastSectionMode = lastSectionMode
        return self
    }
    open func withMaxDurationToPt(_ maxDurationToPt: Int32) -> CoverageLonLatJourneysRequestBuilder {
        self.maxDurationToPt = maxDurationToPt
        return self
    }
    open func withMaxWalkingDurationToPt(_ maxWalkingDurationToPt: Int32) -> CoverageLonLatJourneysRequestBuilder {
        self.maxWalkingDurationToPt = maxWalkingDurationToPt
        return self
    }
    open func withMaxBikeDurationToPt(_ maxBikeDurationToPt: Int32) -> CoverageLonLatJourneysRequestBuilder {
        self.maxBikeDurationToPt = maxBikeDurationToPt
        return self
    }
    open func withMaxBssDurationToPt(_ maxBssDurationToPt: Int32) -> CoverageLonLatJourneysRequestBuilder {
        self.maxBssDurationToPt = maxBssDurationToPt
        return self
    }
    open func withMaxCarDurationToPt(_ maxCarDurationToPt: Int32) -> CoverageLonLatJourneysRequestBuilder {
        self.maxCarDurationToPt = maxCarDurationToPt
        return self
    }
    open func withWalkingSpeed(_ walkingSpeed: Float) -> CoverageLonLatJourneysRequestBuilder {
        self.walkingSpeed = walkingSpeed
        return self
    }
    open func withBikeSpeed(_ bikeSpeed: Float) -> CoverageLonLatJourneysRequestBuilder {
        self.bikeSpeed = bikeSpeed
        return self
    }
    open func withBssSpeed(_ bssSpeed: Float) -> CoverageLonLatJourneysRequestBuilder {
        self.bssSpeed = bssSpeed
        return self
    }
    open func withCarSpeed(_ carSpeed: Float) -> CoverageLonLatJourneysRequestBuilder {
        self.carSpeed = carSpeed
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatJourneysRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withAllowedId(_ allowedId: [String]) -> CoverageLonLatJourneysRequestBuilder {
        self.allowedId = allowedId
        return self
    }
    open func withDisruptionActive(_ disruptionActive: Bool) -> CoverageLonLatJourneysRequestBuilder {
        self.disruptionActive = disruptionActive
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness_getCoverageLonLatJourneys) -> CoverageLonLatJourneysRequestBuilder {
        self.dataFreshness = dataFreshness
        return self
    }
    open func withDataFreshness(_ dataFreshnessValue: String) -> CoverageLonLatJourneysRequestBuilder {
        return withDataFreshness(DataFreshness_getCoverageLonLatJourneys(rawValue: dataFreshnessValue)!);
    }
    open func withMaxDuration(_ maxDuration: Int32) -> CoverageLonLatJourneysRequestBuilder {
        self.maxDuration = maxDuration
        return self
    }
    open func withWheelchair(_ wheelchair: Bool) -> CoverageLonLatJourneysRequestBuilder {
        self.wheelchair = wheelchair
        return self
    }
    open func withTravelerType(_ travelerType: TravelerType_getCoverageLonLatJourneys) -> CoverageLonLatJourneysRequestBuilder {
        self.travelerType = travelerType
        return self
    }
    open func withTravelerType(_ travelerTypeValue: String) -> CoverageLonLatJourneysRequestBuilder {
        return withTravelerType(TravelerType_getCoverageLonLatJourneys(rawValue: travelerTypeValue)!);
    }
    open func withDirectPath(_ directPath: DirectPath_getCoverageLonLatJourneys) -> CoverageLonLatJourneysRequestBuilder {
        self.directPath = directPath
        return self
    }
    open func withDirectPath(_ directPathValue: String) -> CoverageLonLatJourneysRequestBuilder {
        return withDirectPath(DirectPath_getCoverageLonLatJourneys(rawValue: directPathValue)!);
    }
    open func withCount(_ count: Int32) -> CoverageLonLatJourneysRequestBuilder {
        self.count = count
        return self
    }
    open func withIsJourneySchedules(_ isJourneySchedules: Bool) -> CoverageLonLatJourneysRequestBuilder {
        self.isJourneySchedules = isJourneySchedules
        return self
    }
    open func withMinNbJourneys(_ minNbJourneys: Int32) -> CoverageLonLatJourneysRequestBuilder {
        self.minNbJourneys = minNbJourneys
        return self
    }
    open func withMaxNbJourneys(_ maxNbJourneys: Int32) -> CoverageLonLatJourneysRequestBuilder {
        self.maxNbJourneys = maxNbJourneys
        return self
    }
    open func withBssStands(_ bssStands: Bool) -> CoverageLonLatJourneysRequestBuilder {
        self.bssStands = bssStands
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/journeys"
        path = path.replacingOccurrences(of: "{lat}", with: "\(self.lat!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{lon}", with: "\(self.lon!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "from": self.from, 
            "to": self.to, 
            "datetime": self.datetime, 
            "datetime_represents": self.datetimeRepresents?.rawValue, 
            "max_nb_transfers": self.maxNbTransfers?.encodeToJSON(), 
            "min_nb_transfers": self.minNbTransfers?.encodeToJSON(), 
            "first_section_mode[]": self.firstSectionMode, 
            "last_section_mode[]": self.lastSectionMode, 
            "max_duration_to_pt": self.maxDurationToPt?.encodeToJSON(), 
            "max_walking_duration_to_pt": self.maxWalkingDurationToPt?.encodeToJSON(), 
            "max_bike_duration_to_pt": self.maxBikeDurationToPt?.encodeToJSON(), 
            "max_bss_duration_to_pt": self.maxBssDurationToPt?.encodeToJSON(), 
            "max_car_duration_to_pt": self.maxCarDurationToPt?.encodeToJSON(), 
            "walking_speed": self.walkingSpeed, 
            "bike_speed": self.bikeSpeed, 
            "bss_speed": self.bssSpeed, 
            "car_speed": self.carSpeed, 
            "forbidden_uris[]": self.forbiddenUris, 
            "allowed_id[]": self.allowedId, 
            "disruption_active": self.disruptionActive, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "max_duration": self.maxDuration?.encodeToJSON(), 
            "wheelchair": self.wheelchair, 
            "traveler_type": self.travelerType?.rawValue, 
            "direct_path": self.directPath?.rawValue, 
            "count": self.count?.encodeToJSON(), 
            "is_journey_schedules": self.isJourneySchedules, 
            "min_nb_journeys": self.minNbJourneys?.encodeToJSON(), 
            "max_nb_journeys": self.maxNbJourneys?.encodeToJSON(), 
            "bss_stands": self.bssStands
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Journeys?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Journeys>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatUriJourneysRequestBuilder: NSObject {
    let currentApi: JourneysAPI

    /**
    * enum for parameter datetimeRepresents
    */
    public enum DatetimeRepresents_getCoverageLonLatUriJourneys: String { 
        case arrival = "arrival"
        case departure = "departure"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness_getCoverageLonLatUriJourneys: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter travelerType
    */
    public enum TravelerType_getCoverageLonLatUriJourneys: String { 
        case cyclist = "cyclist"
        case luggage = "luggage"
        case wheelchair = "wheelchair"
        case standard = "standard"
        case motorist = "motorist"
        case fastWalker = "fast_walker"
        case slowWalker = "slow_walker"
    }
    /**
    * enum for parameter directPath
    */
    public enum DirectPath_getCoverageLonLatUriJourneys: String { 
        case indifferent = "indifferent"
        case only = "only"
        case _none = "none"
    }
    var lat: Double? = nil
    var lon: Double? = nil
    var uri: String? = nil
    var from: String? = nil
    var to: String? = nil
    var datetime: String? = nil
    var datetimeRepresents: DatetimeRepresents_getCoverageLonLatUriJourneys? = nil
    var maxNbTransfers: Int32? = nil
    var minNbTransfers: Int32? = nil
    var firstSectionMode: [String]? = nil
    var lastSectionMode: [String]? = nil
    var maxDurationToPt: Int32? = nil
    var maxWalkingDurationToPt: Int32? = nil
    var maxBikeDurationToPt: Int32? = nil
    var maxBssDurationToPt: Int32? = nil
    var maxCarDurationToPt: Int32? = nil
    var walkingSpeed: Float? = nil
    var bikeSpeed: Float? = nil
    var bssSpeed: Float? = nil
    var carSpeed: Float? = nil
    var forbiddenUris: [String]? = nil
    var allowedId: [String]? = nil
    var disruptionActive: Bool? = nil
    var dataFreshness: DataFreshness_getCoverageLonLatUriJourneys? = nil
    var maxDuration: Int32? = nil
    var wheelchair: Bool? = nil
    var travelerType: TravelerType_getCoverageLonLatUriJourneys? = nil
    var directPath: DirectPath_getCoverageLonLatUriJourneys? = nil
    var count: Int32? = nil
    var isJourneySchedules: Bool? = nil
    var minNbJourneys: Int32? = nil
    var maxNbJourneys: Int32? = nil
    var bssStands: Bool? = nil

    public init(currentApi: JourneysAPI) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatUriJourneysRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatUriJourneysRequestBuilder {
        self.lon = lon
        return self
    }
    open func withUri(_ uri: String) -> CoverageLonLatUriJourneysRequestBuilder {
        self.uri = uri
        return self
    }
    open func withFrom(_ from: String) -> CoverageLonLatUriJourneysRequestBuilder {
        self.from = from
        return self
    }
    open func withTo(_ to: String) -> CoverageLonLatUriJourneysRequestBuilder {
        self.to = to
        return self
    }
    open func withDatetime(_ datetime: String) -> CoverageLonLatUriJourneysRequestBuilder {
        self.datetime = datetime
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresents: DatetimeRepresents_getCoverageLonLatUriJourneys) -> CoverageLonLatUriJourneysRequestBuilder {
        self.datetimeRepresents = datetimeRepresents
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresentsValue: String) -> CoverageLonLatUriJourneysRequestBuilder {
        return withDatetimeRepresents(DatetimeRepresents_getCoverageLonLatUriJourneys(rawValue: datetimeRepresentsValue)!);
    }
    open func withMaxNbTransfers(_ maxNbTransfers: Int32) -> CoverageLonLatUriJourneysRequestBuilder {
        self.maxNbTransfers = maxNbTransfers
        return self
    }
    open func withMinNbTransfers(_ minNbTransfers: Int32) -> CoverageLonLatUriJourneysRequestBuilder {
        self.minNbTransfers = minNbTransfers
        return self
    }
    open func withFirstSectionMode(_ firstSectionMode: [String]) -> CoverageLonLatUriJourneysRequestBuilder {
        self.firstSectionMode = firstSectionMode
        return self
    }
    open func withLastSectionMode(_ lastSectionMode: [String]) -> CoverageLonLatUriJourneysRequestBuilder {
        self.lastSectionMode = lastSectionMode
        return self
    }
    open func withMaxDurationToPt(_ maxDurationToPt: Int32) -> CoverageLonLatUriJourneysRequestBuilder {
        self.maxDurationToPt = maxDurationToPt
        return self
    }
    open func withMaxWalkingDurationToPt(_ maxWalkingDurationToPt: Int32) -> CoverageLonLatUriJourneysRequestBuilder {
        self.maxWalkingDurationToPt = maxWalkingDurationToPt
        return self
    }
    open func withMaxBikeDurationToPt(_ maxBikeDurationToPt: Int32) -> CoverageLonLatUriJourneysRequestBuilder {
        self.maxBikeDurationToPt = maxBikeDurationToPt
        return self
    }
    open func withMaxBssDurationToPt(_ maxBssDurationToPt: Int32) -> CoverageLonLatUriJourneysRequestBuilder {
        self.maxBssDurationToPt = maxBssDurationToPt
        return self
    }
    open func withMaxCarDurationToPt(_ maxCarDurationToPt: Int32) -> CoverageLonLatUriJourneysRequestBuilder {
        self.maxCarDurationToPt = maxCarDurationToPt
        return self
    }
    open func withWalkingSpeed(_ walkingSpeed: Float) -> CoverageLonLatUriJourneysRequestBuilder {
        self.walkingSpeed = walkingSpeed
        return self
    }
    open func withBikeSpeed(_ bikeSpeed: Float) -> CoverageLonLatUriJourneysRequestBuilder {
        self.bikeSpeed = bikeSpeed
        return self
    }
    open func withBssSpeed(_ bssSpeed: Float) -> CoverageLonLatUriJourneysRequestBuilder {
        self.bssSpeed = bssSpeed
        return self
    }
    open func withCarSpeed(_ carSpeed: Float) -> CoverageLonLatUriJourneysRequestBuilder {
        self.carSpeed = carSpeed
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatUriJourneysRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withAllowedId(_ allowedId: [String]) -> CoverageLonLatUriJourneysRequestBuilder {
        self.allowedId = allowedId
        return self
    }
    open func withDisruptionActive(_ disruptionActive: Bool) -> CoverageLonLatUriJourneysRequestBuilder {
        self.disruptionActive = disruptionActive
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness_getCoverageLonLatUriJourneys) -> CoverageLonLatUriJourneysRequestBuilder {
        self.dataFreshness = dataFreshness
        return self
    }
    open func withDataFreshness(_ dataFreshnessValue: String) -> CoverageLonLatUriJourneysRequestBuilder {
        return withDataFreshness(DataFreshness_getCoverageLonLatUriJourneys(rawValue: dataFreshnessValue)!);
    }
    open func withMaxDuration(_ maxDuration: Int32) -> CoverageLonLatUriJourneysRequestBuilder {
        self.maxDuration = maxDuration
        return self
    }
    open func withWheelchair(_ wheelchair: Bool) -> CoverageLonLatUriJourneysRequestBuilder {
        self.wheelchair = wheelchair
        return self
    }
    open func withTravelerType(_ travelerType: TravelerType_getCoverageLonLatUriJourneys) -> CoverageLonLatUriJourneysRequestBuilder {
        self.travelerType = travelerType
        return self
    }
    open func withTravelerType(_ travelerTypeValue: String) -> CoverageLonLatUriJourneysRequestBuilder {
        return withTravelerType(TravelerType_getCoverageLonLatUriJourneys(rawValue: travelerTypeValue)!);
    }
    open func withDirectPath(_ directPath: DirectPath_getCoverageLonLatUriJourneys) -> CoverageLonLatUriJourneysRequestBuilder {
        self.directPath = directPath
        return self
    }
    open func withDirectPath(_ directPathValue: String) -> CoverageLonLatUriJourneysRequestBuilder {
        return withDirectPath(DirectPath_getCoverageLonLatUriJourneys(rawValue: directPathValue)!);
    }
    open func withCount(_ count: Int32) -> CoverageLonLatUriJourneysRequestBuilder {
        self.count = count
        return self
    }
    open func withIsJourneySchedules(_ isJourneySchedules: Bool) -> CoverageLonLatUriJourneysRequestBuilder {
        self.isJourneySchedules = isJourneySchedules
        return self
    }
    open func withMinNbJourneys(_ minNbJourneys: Int32) -> CoverageLonLatUriJourneysRequestBuilder {
        self.minNbJourneys = minNbJourneys
        return self
    }
    open func withMaxNbJourneys(_ maxNbJourneys: Int32) -> CoverageLonLatUriJourneysRequestBuilder {
        self.maxNbJourneys = maxNbJourneys
        return self
    }
    open func withBssStands(_ bssStands: Bool) -> CoverageLonLatUriJourneysRequestBuilder {
        self.bssStands = bssStands
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/{uri}/journeys"
        path = path.replacingOccurrences(of: "{lat}", with: "\(self.lat!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{lon}", with: "\(self.lon!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{uri}", with: "\(self.uri!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "from": self.from, 
            "to": self.to, 
            "datetime": self.datetime, 
            "datetime_represents": self.datetimeRepresents?.rawValue, 
            "max_nb_transfers": self.maxNbTransfers?.encodeToJSON(), 
            "min_nb_transfers": self.minNbTransfers?.encodeToJSON(), 
            "first_section_mode[]": self.firstSectionMode, 
            "last_section_mode[]": self.lastSectionMode, 
            "max_duration_to_pt": self.maxDurationToPt?.encodeToJSON(), 
            "max_walking_duration_to_pt": self.maxWalkingDurationToPt?.encodeToJSON(), 
            "max_bike_duration_to_pt": self.maxBikeDurationToPt?.encodeToJSON(), 
            "max_bss_duration_to_pt": self.maxBssDurationToPt?.encodeToJSON(), 
            "max_car_duration_to_pt": self.maxCarDurationToPt?.encodeToJSON(), 
            "walking_speed": self.walkingSpeed, 
            "bike_speed": self.bikeSpeed, 
            "bss_speed": self.bssSpeed, 
            "car_speed": self.carSpeed, 
            "forbidden_uris[]": self.forbiddenUris, 
            "allowed_id[]": self.allowedId, 
            "disruption_active": self.disruptionActive, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "max_duration": self.maxDuration?.encodeToJSON(), 
            "wheelchair": self.wheelchair, 
            "traveler_type": self.travelerType?.rawValue, 
            "direct_path": self.directPath?.rawValue, 
            "count": self.count?.encodeToJSON(), 
            "is_journey_schedules": self.isJourneySchedules, 
            "min_nb_journeys": self.minNbJourneys?.encodeToJSON(), 
            "max_nb_journeys": self.maxNbJourneys?.encodeToJSON(), 
            "bss_stands": self.bssStands
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Journeys?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Journeys>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionJourneysRequestBuilder: NSObject {
    let currentApi: JourneysAPI

    /**
    * enum for parameter datetimeRepresents
    */
    public enum DatetimeRepresents_getCoverageRegionJourneys: String { 
        case arrival = "arrival"
        case departure = "departure"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness_getCoverageRegionJourneys: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter travelerType
    */
    public enum TravelerType_getCoverageRegionJourneys: String { 
        case cyclist = "cyclist"
        case luggage = "luggage"
        case wheelchair = "wheelchair"
        case standard = "standard"
        case motorist = "motorist"
        case fastWalker = "fast_walker"
        case slowWalker = "slow_walker"
    }
    /**
    * enum for parameter directPath
    */
    public enum DirectPath_getCoverageRegionJourneys: String { 
        case indifferent = "indifferent"
        case only = "only"
        case _none = "none"
    }
    var region: String? = nil
    var from: String? = nil
    var to: String? = nil
    var datetime: String? = nil
    var datetimeRepresents: DatetimeRepresents_getCoverageRegionJourneys? = nil
    var maxNbTransfers: Int32? = nil
    var minNbTransfers: Int32? = nil
    var firstSectionMode: [String]? = nil
    var lastSectionMode: [String]? = nil
    var maxDurationToPt: Int32? = nil
    var maxWalkingDurationToPt: Int32? = nil
    var maxBikeDurationToPt: Int32? = nil
    var maxBssDurationToPt: Int32? = nil
    var maxCarDurationToPt: Int32? = nil
    var walkingSpeed: Float? = nil
    var bikeSpeed: Float? = nil
    var bssSpeed: Float? = nil
    var carSpeed: Float? = nil
    var forbiddenUris: [String]? = nil
    var allowedId: [String]? = nil
    var disruptionActive: Bool? = nil
    var dataFreshness: DataFreshness_getCoverageRegionJourneys? = nil
    var maxDuration: Int32? = nil
    var wheelchair: Bool? = nil
    var travelerType: TravelerType_getCoverageRegionJourneys? = nil
    var directPath: DirectPath_getCoverageRegionJourneys? = nil
    var count: Int32? = nil
    var isJourneySchedules: Bool? = nil
    var minNbJourneys: Int32? = nil
    var maxNbJourneys: Int32? = nil
    var bssStands: Bool? = nil

    public init(currentApi: JourneysAPI) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionJourneysRequestBuilder {
        self.region = region
        return self
    }
    open func withFrom(_ from: String) -> CoverageRegionJourneysRequestBuilder {
        self.from = from
        return self
    }
    open func withTo(_ to: String) -> CoverageRegionJourneysRequestBuilder {
        self.to = to
        return self
    }
    open func withDatetime(_ datetime: String) -> CoverageRegionJourneysRequestBuilder {
        self.datetime = datetime
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresents: DatetimeRepresents_getCoverageRegionJourneys) -> CoverageRegionJourneysRequestBuilder {
        self.datetimeRepresents = datetimeRepresents
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresentsValue: String) -> CoverageRegionJourneysRequestBuilder {
        return withDatetimeRepresents(DatetimeRepresents_getCoverageRegionJourneys(rawValue: datetimeRepresentsValue)!);
    }
    open func withMaxNbTransfers(_ maxNbTransfers: Int32) -> CoverageRegionJourneysRequestBuilder {
        self.maxNbTransfers = maxNbTransfers
        return self
    }
    open func withMinNbTransfers(_ minNbTransfers: Int32) -> CoverageRegionJourneysRequestBuilder {
        self.minNbTransfers = minNbTransfers
        return self
    }
    open func withFirstSectionMode(_ firstSectionMode: [String]) -> CoverageRegionJourneysRequestBuilder {
        self.firstSectionMode = firstSectionMode
        return self
    }
    open func withLastSectionMode(_ lastSectionMode: [String]) -> CoverageRegionJourneysRequestBuilder {
        self.lastSectionMode = lastSectionMode
        return self
    }
    open func withMaxDurationToPt(_ maxDurationToPt: Int32) -> CoverageRegionJourneysRequestBuilder {
        self.maxDurationToPt = maxDurationToPt
        return self
    }
    open func withMaxWalkingDurationToPt(_ maxWalkingDurationToPt: Int32) -> CoverageRegionJourneysRequestBuilder {
        self.maxWalkingDurationToPt = maxWalkingDurationToPt
        return self
    }
    open func withMaxBikeDurationToPt(_ maxBikeDurationToPt: Int32) -> CoverageRegionJourneysRequestBuilder {
        self.maxBikeDurationToPt = maxBikeDurationToPt
        return self
    }
    open func withMaxBssDurationToPt(_ maxBssDurationToPt: Int32) -> CoverageRegionJourneysRequestBuilder {
        self.maxBssDurationToPt = maxBssDurationToPt
        return self
    }
    open func withMaxCarDurationToPt(_ maxCarDurationToPt: Int32) -> CoverageRegionJourneysRequestBuilder {
        self.maxCarDurationToPt = maxCarDurationToPt
        return self
    }
    open func withWalkingSpeed(_ walkingSpeed: Float) -> CoverageRegionJourneysRequestBuilder {
        self.walkingSpeed = walkingSpeed
        return self
    }
    open func withBikeSpeed(_ bikeSpeed: Float) -> CoverageRegionJourneysRequestBuilder {
        self.bikeSpeed = bikeSpeed
        return self
    }
    open func withBssSpeed(_ bssSpeed: Float) -> CoverageRegionJourneysRequestBuilder {
        self.bssSpeed = bssSpeed
        return self
    }
    open func withCarSpeed(_ carSpeed: Float) -> CoverageRegionJourneysRequestBuilder {
        self.carSpeed = carSpeed
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionJourneysRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withAllowedId(_ allowedId: [String]) -> CoverageRegionJourneysRequestBuilder {
        self.allowedId = allowedId
        return self
    }
    open func withDisruptionActive(_ disruptionActive: Bool) -> CoverageRegionJourneysRequestBuilder {
        self.disruptionActive = disruptionActive
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness_getCoverageRegionJourneys) -> CoverageRegionJourneysRequestBuilder {
        self.dataFreshness = dataFreshness
        return self
    }
    open func withDataFreshness(_ dataFreshnessValue: String) -> CoverageRegionJourneysRequestBuilder {
        return withDataFreshness(DataFreshness_getCoverageRegionJourneys(rawValue: dataFreshnessValue)!);
    }
    open func withMaxDuration(_ maxDuration: Int32) -> CoverageRegionJourneysRequestBuilder {
        self.maxDuration = maxDuration
        return self
    }
    open func withWheelchair(_ wheelchair: Bool) -> CoverageRegionJourneysRequestBuilder {
        self.wheelchair = wheelchair
        return self
    }
    open func withTravelerType(_ travelerType: TravelerType_getCoverageRegionJourneys) -> CoverageRegionJourneysRequestBuilder {
        self.travelerType = travelerType
        return self
    }
    open func withTravelerType(_ travelerTypeValue: String) -> CoverageRegionJourneysRequestBuilder {
        return withTravelerType(TravelerType_getCoverageRegionJourneys(rawValue: travelerTypeValue)!);
    }
    open func withDirectPath(_ directPath: DirectPath_getCoverageRegionJourneys) -> CoverageRegionJourneysRequestBuilder {
        self.directPath = directPath
        return self
    }
    open func withDirectPath(_ directPathValue: String) -> CoverageRegionJourneysRequestBuilder {
        return withDirectPath(DirectPath_getCoverageRegionJourneys(rawValue: directPathValue)!);
    }
    open func withCount(_ count: Int32) -> CoverageRegionJourneysRequestBuilder {
        self.count = count
        return self
    }
    open func withIsJourneySchedules(_ isJourneySchedules: Bool) -> CoverageRegionJourneysRequestBuilder {
        self.isJourneySchedules = isJourneySchedules
        return self
    }
    open func withMinNbJourneys(_ minNbJourneys: Int32) -> CoverageRegionJourneysRequestBuilder {
        self.minNbJourneys = minNbJourneys
        return self
    }
    open func withMaxNbJourneys(_ maxNbJourneys: Int32) -> CoverageRegionJourneysRequestBuilder {
        self.maxNbJourneys = maxNbJourneys
        return self
    }
    open func withBssStands(_ bssStands: Bool) -> CoverageRegionJourneysRequestBuilder {
        self.bssStands = bssStands
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/journeys"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "from": self.from, 
            "to": self.to, 
            "datetime": self.datetime, 
            "datetime_represents": self.datetimeRepresents?.rawValue, 
            "max_nb_transfers": self.maxNbTransfers?.encodeToJSON(), 
            "min_nb_transfers": self.minNbTransfers?.encodeToJSON(), 
            "first_section_mode[]": self.firstSectionMode, 
            "last_section_mode[]": self.lastSectionMode, 
            "max_duration_to_pt": self.maxDurationToPt?.encodeToJSON(), 
            "max_walking_duration_to_pt": self.maxWalkingDurationToPt?.encodeToJSON(), 
            "max_bike_duration_to_pt": self.maxBikeDurationToPt?.encodeToJSON(), 
            "max_bss_duration_to_pt": self.maxBssDurationToPt?.encodeToJSON(), 
            "max_car_duration_to_pt": self.maxCarDurationToPt?.encodeToJSON(), 
            "walking_speed": self.walkingSpeed, 
            "bike_speed": self.bikeSpeed, 
            "bss_speed": self.bssSpeed, 
            "car_speed": self.carSpeed, 
            "forbidden_uris[]": self.forbiddenUris, 
            "allowed_id[]": self.allowedId, 
            "disruption_active": self.disruptionActive, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "max_duration": self.maxDuration?.encodeToJSON(), 
            "wheelchair": self.wheelchair, 
            "traveler_type": self.travelerType?.rawValue, 
            "direct_path": self.directPath?.rawValue, 
            "count": self.count?.encodeToJSON(), 
            "is_journey_schedules": self.isJourneySchedules, 
            "min_nb_journeys": self.minNbJourneys?.encodeToJSON(), 
            "max_nb_journeys": self.maxNbJourneys?.encodeToJSON(), 
            "bss_stands": self.bssStands
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Journeys?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Journeys>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriJourneysRequestBuilder: NSObject {
    let currentApi: JourneysAPI

    /**
    * enum for parameter datetimeRepresents
    */
    public enum DatetimeRepresents_getCoverageRegionUriJourneys: String { 
        case arrival = "arrival"
        case departure = "departure"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness_getCoverageRegionUriJourneys: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter travelerType
    */
    public enum TravelerType_getCoverageRegionUriJourneys: String { 
        case cyclist = "cyclist"
        case luggage = "luggage"
        case wheelchair = "wheelchair"
        case standard = "standard"
        case motorist = "motorist"
        case fastWalker = "fast_walker"
        case slowWalker = "slow_walker"
    }
    /**
    * enum for parameter directPath
    */
    public enum DirectPath_getCoverageRegionUriJourneys: String { 
        case indifferent = "indifferent"
        case only = "only"
        case _none = "none"
    }
    var region: String? = nil
    var uri: String? = nil
    var from: String? = nil
    var to: String? = nil
    var datetime: String? = nil
    var datetimeRepresents: DatetimeRepresents_getCoverageRegionUriJourneys? = nil
    var maxNbTransfers: Int32? = nil
    var minNbTransfers: Int32? = nil
    var firstSectionMode: [String]? = nil
    var lastSectionMode: [String]? = nil
    var maxDurationToPt: Int32? = nil
    var maxWalkingDurationToPt: Int32? = nil
    var maxBikeDurationToPt: Int32? = nil
    var maxBssDurationToPt: Int32? = nil
    var maxCarDurationToPt: Int32? = nil
    var walkingSpeed: Float? = nil
    var bikeSpeed: Float? = nil
    var bssSpeed: Float? = nil
    var carSpeed: Float? = nil
    var forbiddenUris: [String]? = nil
    var allowedId: [String]? = nil
    var disruptionActive: Bool? = nil
    var dataFreshness: DataFreshness_getCoverageRegionUriJourneys? = nil
    var maxDuration: Int32? = nil
    var wheelchair: Bool? = nil
    var travelerType: TravelerType_getCoverageRegionUriJourneys? = nil
    var directPath: DirectPath_getCoverageRegionUriJourneys? = nil
    var count: Int32? = nil
    var isJourneySchedules: Bool? = nil
    var minNbJourneys: Int32? = nil
    var maxNbJourneys: Int32? = nil
    var bssStands: Bool? = nil

    public init(currentApi: JourneysAPI) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionUriJourneysRequestBuilder {
        self.region = region
        return self
    }
    open func withUri(_ uri: String) -> CoverageRegionUriJourneysRequestBuilder {
        self.uri = uri
        return self
    }
    open func withFrom(_ from: String) -> CoverageRegionUriJourneysRequestBuilder {
        self.from = from
        return self
    }
    open func withTo(_ to: String) -> CoverageRegionUriJourneysRequestBuilder {
        self.to = to
        return self
    }
    open func withDatetime(_ datetime: String) -> CoverageRegionUriJourneysRequestBuilder {
        self.datetime = datetime
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresents: DatetimeRepresents_getCoverageRegionUriJourneys) -> CoverageRegionUriJourneysRequestBuilder {
        self.datetimeRepresents = datetimeRepresents
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresentsValue: String) -> CoverageRegionUriJourneysRequestBuilder {
        return withDatetimeRepresents(DatetimeRepresents_getCoverageRegionUriJourneys(rawValue: datetimeRepresentsValue)!);
    }
    open func withMaxNbTransfers(_ maxNbTransfers: Int32) -> CoverageRegionUriJourneysRequestBuilder {
        self.maxNbTransfers = maxNbTransfers
        return self
    }
    open func withMinNbTransfers(_ minNbTransfers: Int32) -> CoverageRegionUriJourneysRequestBuilder {
        self.minNbTransfers = minNbTransfers
        return self
    }
    open func withFirstSectionMode(_ firstSectionMode: [String]) -> CoverageRegionUriJourneysRequestBuilder {
        self.firstSectionMode = firstSectionMode
        return self
    }
    open func withLastSectionMode(_ lastSectionMode: [String]) -> CoverageRegionUriJourneysRequestBuilder {
        self.lastSectionMode = lastSectionMode
        return self
    }
    open func withMaxDurationToPt(_ maxDurationToPt: Int32) -> CoverageRegionUriJourneysRequestBuilder {
        self.maxDurationToPt = maxDurationToPt
        return self
    }
    open func withMaxWalkingDurationToPt(_ maxWalkingDurationToPt: Int32) -> CoverageRegionUriJourneysRequestBuilder {
        self.maxWalkingDurationToPt = maxWalkingDurationToPt
        return self
    }
    open func withMaxBikeDurationToPt(_ maxBikeDurationToPt: Int32) -> CoverageRegionUriJourneysRequestBuilder {
        self.maxBikeDurationToPt = maxBikeDurationToPt
        return self
    }
    open func withMaxBssDurationToPt(_ maxBssDurationToPt: Int32) -> CoverageRegionUriJourneysRequestBuilder {
        self.maxBssDurationToPt = maxBssDurationToPt
        return self
    }
    open func withMaxCarDurationToPt(_ maxCarDurationToPt: Int32) -> CoverageRegionUriJourneysRequestBuilder {
        self.maxCarDurationToPt = maxCarDurationToPt
        return self
    }
    open func withWalkingSpeed(_ walkingSpeed: Float) -> CoverageRegionUriJourneysRequestBuilder {
        self.walkingSpeed = walkingSpeed
        return self
    }
    open func withBikeSpeed(_ bikeSpeed: Float) -> CoverageRegionUriJourneysRequestBuilder {
        self.bikeSpeed = bikeSpeed
        return self
    }
    open func withBssSpeed(_ bssSpeed: Float) -> CoverageRegionUriJourneysRequestBuilder {
        self.bssSpeed = bssSpeed
        return self
    }
    open func withCarSpeed(_ carSpeed: Float) -> CoverageRegionUriJourneysRequestBuilder {
        self.carSpeed = carSpeed
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionUriJourneysRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withAllowedId(_ allowedId: [String]) -> CoverageRegionUriJourneysRequestBuilder {
        self.allowedId = allowedId
        return self
    }
    open func withDisruptionActive(_ disruptionActive: Bool) -> CoverageRegionUriJourneysRequestBuilder {
        self.disruptionActive = disruptionActive
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness_getCoverageRegionUriJourneys) -> CoverageRegionUriJourneysRequestBuilder {
        self.dataFreshness = dataFreshness
        return self
    }
    open func withDataFreshness(_ dataFreshnessValue: String) -> CoverageRegionUriJourneysRequestBuilder {
        return withDataFreshness(DataFreshness_getCoverageRegionUriJourneys(rawValue: dataFreshnessValue)!);
    }
    open func withMaxDuration(_ maxDuration: Int32) -> CoverageRegionUriJourneysRequestBuilder {
        self.maxDuration = maxDuration
        return self
    }
    open func withWheelchair(_ wheelchair: Bool) -> CoverageRegionUriJourneysRequestBuilder {
        self.wheelchair = wheelchair
        return self
    }
    open func withTravelerType(_ travelerType: TravelerType_getCoverageRegionUriJourneys) -> CoverageRegionUriJourneysRequestBuilder {
        self.travelerType = travelerType
        return self
    }
    open func withTravelerType(_ travelerTypeValue: String) -> CoverageRegionUriJourneysRequestBuilder {
        return withTravelerType(TravelerType_getCoverageRegionUriJourneys(rawValue: travelerTypeValue)!);
    }
    open func withDirectPath(_ directPath: DirectPath_getCoverageRegionUriJourneys) -> CoverageRegionUriJourneysRequestBuilder {
        self.directPath = directPath
        return self
    }
    open func withDirectPath(_ directPathValue: String) -> CoverageRegionUriJourneysRequestBuilder {
        return withDirectPath(DirectPath_getCoverageRegionUriJourneys(rawValue: directPathValue)!);
    }
    open func withCount(_ count: Int32) -> CoverageRegionUriJourneysRequestBuilder {
        self.count = count
        return self
    }
    open func withIsJourneySchedules(_ isJourneySchedules: Bool) -> CoverageRegionUriJourneysRequestBuilder {
        self.isJourneySchedules = isJourneySchedules
        return self
    }
    open func withMinNbJourneys(_ minNbJourneys: Int32) -> CoverageRegionUriJourneysRequestBuilder {
        self.minNbJourneys = minNbJourneys
        return self
    }
    open func withMaxNbJourneys(_ maxNbJourneys: Int32) -> CoverageRegionUriJourneysRequestBuilder {
        self.maxNbJourneys = maxNbJourneys
        return self
    }
    open func withBssStands(_ bssStands: Bool) -> CoverageRegionUriJourneysRequestBuilder {
        self.bssStands = bssStands
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/journeys"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{uri}", with: "\(self.uri!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "from": self.from, 
            "to": self.to, 
            "datetime": self.datetime, 
            "datetime_represents": self.datetimeRepresents?.rawValue, 
            "max_nb_transfers": self.maxNbTransfers?.encodeToJSON(), 
            "min_nb_transfers": self.minNbTransfers?.encodeToJSON(), 
            "first_section_mode[]": self.firstSectionMode, 
            "last_section_mode[]": self.lastSectionMode, 
            "max_duration_to_pt": self.maxDurationToPt?.encodeToJSON(), 
            "max_walking_duration_to_pt": self.maxWalkingDurationToPt?.encodeToJSON(), 
            "max_bike_duration_to_pt": self.maxBikeDurationToPt?.encodeToJSON(), 
            "max_bss_duration_to_pt": self.maxBssDurationToPt?.encodeToJSON(), 
            "max_car_duration_to_pt": self.maxCarDurationToPt?.encodeToJSON(), 
            "walking_speed": self.walkingSpeed, 
            "bike_speed": self.bikeSpeed, 
            "bss_speed": self.bssSpeed, 
            "car_speed": self.carSpeed, 
            "forbidden_uris[]": self.forbiddenUris, 
            "allowed_id[]": self.allowedId, 
            "disruption_active": self.disruptionActive, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "max_duration": self.maxDuration?.encodeToJSON(), 
            "wheelchair": self.wheelchair, 
            "traveler_type": self.travelerType?.rawValue, 
            "direct_path": self.directPath?.rawValue, 
            "count": self.count?.encodeToJSON(), 
            "is_journey_schedules": self.isJourneySchedules, 
            "min_nb_journeys": self.minNbJourneys?.encodeToJSON(), 
            "max_nb_journeys": self.maxNbJourneys?.encodeToJSON(), 
            "bss_stands": self.bssStands
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Journeys?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Journeys>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class JourneysRequestBuilder: NSObject {
    let currentApi: JourneysAPI

    /**
    * enum for parameter datetimeRepresents
    */
    public enum DatetimeRepresents_getJourneys: String { 
        case arrival = "arrival"
        case departure = "departure"
    }
    /**
    * enum for parameter dataFreshness
    */
    public enum DataFreshness_getJourneys: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }
    /**
    * enum for parameter travelerType
    */
    public enum TravelerType_getJourneys: String { 
        case cyclist = "cyclist"
        case luggage = "luggage"
        case wheelchair = "wheelchair"
        case standard = "standard"
        case motorist = "motorist"
        case fastWalker = "fast_walker"
        case slowWalker = "slow_walker"
    }
    /**
    * enum for parameter directPath
    */
    public enum DirectPath_getJourneys: String { 
        case indifferent = "indifferent"
        case only = "only"
        case _none = "none"
    }
    var from: String? = nil
    var to: String? = nil
    var datetime: String? = nil
    var datetimeRepresents: DatetimeRepresents_getJourneys? = nil
    var maxNbTransfers: Int32? = nil
    var minNbTransfers: Int32? = nil
    var firstSectionMode: [String]? = nil
    var lastSectionMode: [String]? = nil
    var maxDurationToPt: Int32? = nil
    var maxWalkingDurationToPt: Int32? = nil
    var maxBikeDurationToPt: Int32? = nil
    var maxBssDurationToPt: Int32? = nil
    var maxCarDurationToPt: Int32? = nil
    var walkingSpeed: Float? = nil
    var bikeSpeed: Float? = nil
    var bssSpeed: Float? = nil
    var carSpeed: Float? = nil
    var forbiddenUris: [String]? = nil
    var allowedId: [String]? = nil
    var disruptionActive: Bool? = nil
    var dataFreshness: DataFreshness_getJourneys? = nil
    var maxDuration: Int32? = nil
    var wheelchair: Bool? = nil
    var travelerType: TravelerType_getJourneys? = nil
    var directPath: DirectPath_getJourneys? = nil
    var count: Int32? = nil
    var isJourneySchedules: Bool? = nil
    var minNbJourneys: Int32? = nil
    var maxNbJourneys: Int32? = nil
    var bssStands: Bool? = nil

    public init(currentApi: JourneysAPI) {
        self.currentApi = currentApi
    }

    open func withFrom(_ from: String) -> JourneysRequestBuilder {
        self.from = from
        return self
    }
    open func withTo(_ to: String) -> JourneysRequestBuilder {
        self.to = to
        return self
    }
    open func withDatetime(_ datetime: String) -> JourneysRequestBuilder {
        self.datetime = datetime
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresents: DatetimeRepresents_getJourneys) -> JourneysRequestBuilder {
        self.datetimeRepresents = datetimeRepresents
        return self
    }
    open func withDatetimeRepresents(_ datetimeRepresentsValue: String) -> JourneysRequestBuilder {
        return withDatetimeRepresents(DatetimeRepresents_getJourneys(rawValue: datetimeRepresentsValue)!);
    }
    open func withMaxNbTransfers(_ maxNbTransfers: Int32) -> JourneysRequestBuilder {
        self.maxNbTransfers = maxNbTransfers
        return self
    }
    open func withMinNbTransfers(_ minNbTransfers: Int32) -> JourneysRequestBuilder {
        self.minNbTransfers = minNbTransfers
        return self
    }
    open func withFirstSectionMode(_ firstSectionMode: [String]) -> JourneysRequestBuilder {
        self.firstSectionMode = firstSectionMode
        return self
    }
    open func withLastSectionMode(_ lastSectionMode: [String]) -> JourneysRequestBuilder {
        self.lastSectionMode = lastSectionMode
        return self
    }
    open func withMaxDurationToPt(_ maxDurationToPt: Int32) -> JourneysRequestBuilder {
        self.maxDurationToPt = maxDurationToPt
        return self
    }
    open func withMaxWalkingDurationToPt(_ maxWalkingDurationToPt: Int32) -> JourneysRequestBuilder {
        self.maxWalkingDurationToPt = maxWalkingDurationToPt
        return self
    }
    open func withMaxBikeDurationToPt(_ maxBikeDurationToPt: Int32) -> JourneysRequestBuilder {
        self.maxBikeDurationToPt = maxBikeDurationToPt
        return self
    }
    open func withMaxBssDurationToPt(_ maxBssDurationToPt: Int32) -> JourneysRequestBuilder {
        self.maxBssDurationToPt = maxBssDurationToPt
        return self
    }
    open func withMaxCarDurationToPt(_ maxCarDurationToPt: Int32) -> JourneysRequestBuilder {
        self.maxCarDurationToPt = maxCarDurationToPt
        return self
    }
    open func withWalkingSpeed(_ walkingSpeed: Float) -> JourneysRequestBuilder {
        self.walkingSpeed = walkingSpeed
        return self
    }
    open func withBikeSpeed(_ bikeSpeed: Float) -> JourneysRequestBuilder {
        self.bikeSpeed = bikeSpeed
        return self
    }
    open func withBssSpeed(_ bssSpeed: Float) -> JourneysRequestBuilder {
        self.bssSpeed = bssSpeed
        return self
    }
    open func withCarSpeed(_ carSpeed: Float) -> JourneysRequestBuilder {
        self.carSpeed = carSpeed
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> JourneysRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withAllowedId(_ allowedId: [String]) -> JourneysRequestBuilder {
        self.allowedId = allowedId
        return self
    }
    open func withDisruptionActive(_ disruptionActive: Bool) -> JourneysRequestBuilder {
        self.disruptionActive = disruptionActive
        return self
    }
    open func withDataFreshness(_ dataFreshness: DataFreshness_getJourneys) -> JourneysRequestBuilder {
        self.dataFreshness = dataFreshness
        return self
    }
    open func withDataFreshness(_ dataFreshnessValue: String) -> JourneysRequestBuilder {
        return withDataFreshness(DataFreshness_getJourneys(rawValue: dataFreshnessValue)!);
    }
    open func withMaxDuration(_ maxDuration: Int32) -> JourneysRequestBuilder {
        self.maxDuration = maxDuration
        return self
    }
    open func withWheelchair(_ wheelchair: Bool) -> JourneysRequestBuilder {
        self.wheelchair = wheelchair
        return self
    }
    open func withTravelerType(_ travelerType: TravelerType_getJourneys) -> JourneysRequestBuilder {
        self.travelerType = travelerType
        return self
    }
    open func withTravelerType(_ travelerTypeValue: String) -> JourneysRequestBuilder {
        return withTravelerType(TravelerType_getJourneys(rawValue: travelerTypeValue)!);
    }
    open func withDirectPath(_ directPath: DirectPath_getJourneys) -> JourneysRequestBuilder {
        self.directPath = directPath
        return self
    }
    open func withDirectPath(_ directPathValue: String) -> JourneysRequestBuilder {
        return withDirectPath(DirectPath_getJourneys(rawValue: directPathValue)!);
    }
    open func withCount(_ count: Int32) -> JourneysRequestBuilder {
        self.count = count
        return self
    }
    open func withIsJourneySchedules(_ isJourneySchedules: Bool) -> JourneysRequestBuilder {
        self.isJourneySchedules = isJourneySchedules
        return self
    }
    open func withMinNbJourneys(_ minNbJourneys: Int32) -> JourneysRequestBuilder {
        self.minNbJourneys = minNbJourneys
        return self
    }
    open func withMaxNbJourneys(_ maxNbJourneys: Int32) -> JourneysRequestBuilder {
        self.maxNbJourneys = maxNbJourneys
        return self
    }
    open func withBssStands(_ bssStands: Bool) -> JourneysRequestBuilder {
        self.bssStands = bssStands
        return self
    }

    open func makeUrl() -> String {
        let path = "/journeys"
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any?] = [
            "from": self.from, 
            "to": self.to, 
            "datetime": self.datetime, 
            "datetime_represents": self.datetimeRepresents?.rawValue, 
            "max_nb_transfers": self.maxNbTransfers?.encodeToJSON(), 
            "min_nb_transfers": self.minNbTransfers?.encodeToJSON(), 
            "first_section_mode[]": self.firstSectionMode, 
            "last_section_mode[]": self.lastSectionMode, 
            "max_duration_to_pt": self.maxDurationToPt?.encodeToJSON(), 
            "max_walking_duration_to_pt": self.maxWalkingDurationToPt?.encodeToJSON(), 
            "max_bike_duration_to_pt": self.maxBikeDurationToPt?.encodeToJSON(), 
            "max_bss_duration_to_pt": self.maxBssDurationToPt?.encodeToJSON(), 
            "max_car_duration_to_pt": self.maxCarDurationToPt?.encodeToJSON(), 
            "walking_speed": self.walkingSpeed, 
            "bike_speed": self.bikeSpeed, 
            "bss_speed": self.bssSpeed, 
            "car_speed": self.carSpeed, 
            "forbidden_uris[]": self.forbiddenUris, 
            "allowed_id[]": self.allowedId, 
            "disruption_active": self.disruptionActive, 
            "data_freshness": self.dataFreshness?.rawValue, 
            "max_duration": self.maxDuration?.encodeToJSON(), 
            "wheelchair": self.wheelchair, 
            "traveler_type": self.travelerType?.rawValue, 
            "direct_path": self.directPath?.rawValue, 
            "count": self.count?.encodeToJSON(), 
            "is_journey_schedules": self.isJourneySchedules, 
            "min_nb_journeys": self.minNbJourneys?.encodeToJSON(), 
            "max_nb_journeys": self.maxNbJourneys?.encodeToJSON(), 
            "bss_stands": self.bssStands
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: Journeys?,_ error: Error?) -> Void)) {

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<Journeys>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}



open class JourneysAPI: APIBase {
    let token: String

    public init(token: String) {
        self.token = token
    }

    public func newCoverageLonLatJourneysRequestBuilder() -> CoverageLonLatJourneysRequestBuilder {
        return CoverageLonLatJourneysRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatUriJourneysRequestBuilder() -> CoverageLonLatUriJourneysRequestBuilder {
        return CoverageLonLatUriJourneysRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionJourneysRequestBuilder() -> CoverageRegionJourneysRequestBuilder {
        return CoverageRegionJourneysRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriJourneysRequestBuilder() -> CoverageRegionUriJourneysRequestBuilder {
        return CoverageRegionUriJourneysRequestBuilder(currentApi: self)
    }
    public func newJourneysRequestBuilder() -> JourneysRequestBuilder {
        return JourneysRequestBuilder(currentApi: self)
    }
}
