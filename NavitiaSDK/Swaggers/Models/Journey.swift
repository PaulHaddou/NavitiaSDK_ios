//
// Journey.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



public struct Journey: Codable {

    /** Status from the whole journey taking into account the most disturbing information retrieved on every object used (can be \&quot;NO_SERVICE\&quot;, \&quot;SIGNIFICANT_DELAYS\&quot;, ... */
    public var status: String
    public var distances: Distances?
    public var from: Place?
    public var tags: [String]
    /** Number of transfers along the journey */
    public var nbTransfers: Int
    public var durations: Durations?
    /** Arrival date and time of the journey */
    public var arrivalDateTime: String?
    public var calendars: [Calendar]?
    /** Departure date and time of the journey */
    public var departureDateTime: String?
    public var to: Place?
    public var requestedDateTime: String?
    public var fare: Fare
    public var co2Emission: Amount
    /** Used to qualify the journey (can be \&quot;best\&quot;, \&quot;comfort\&quot;, \&quot;non_pt_walk\&quot;, ... */
    public var type: String
    /** Duration of the journey (seconds) */
    public var duration: Int
    public var sections: [Section]?
    public var debug: JourneyDebug?

    public init(status: String, distances: Distances?, from: Place?, tags: [String], nbTransfers: Int, durations: Durations?, arrivalDateTime: String?, calendars: [Calendar]?, departureDateTime: String?, to: Place?, requestedDateTime: String?, fare: Fare, co2Emission: Amount, type: String, duration: Int, sections: [Section]?, debug: JourneyDebug?) {
        self.status = status
        self.distances = distances
        self.from = from
        self.tags = tags
        self.nbTransfers = nbTransfers
        self.durations = durations
        self.arrivalDateTime = arrivalDateTime
        self.calendars = calendars
        self.departureDateTime = departureDateTime
        self.to = to
        self.requestedDateTime = requestedDateTime
        self.fare = fare
        self.co2Emission = co2Emission
        self.type = type
        self.duration = duration
        self.sections = sections
        self.debug = debug
    }

    public enum CodingKeys: String, CodingKey { 
        case status
        case distances
        case from
        case tags
        case nbTransfers = "nb_transfers"
        case durations
        case arrivalDateTime = "arrival_date_time"
        case calendars
        case departureDateTime = "departure_date_time"
        case to
        case requestedDateTime = "requested_date_time"
        case fare
        case co2Emission = "co2_emission"
        case type
        case duration
        case sections
        case debug
    }


}

