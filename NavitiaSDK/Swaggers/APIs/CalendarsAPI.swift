//
// CalendarsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class CalendarsAPI {

    open class func getCoverageLonLatCalendars(lat: Double, lon: Double, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, completion: @escaping ((_ data: Calendars?,_ error: Error?) -> Void)) {
        getCoverageLonLatCalendarsWithRequestBuilder(lat: lat, lon: lon, depth: depth, count: count, startPage: startPage, startDate: startDate, endDate: endDate, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, distance: distance).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatCalendarsWithRequestBuilder(lat: Double, lon: Double, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil) -> RequestBuilder<Calendars> {
        var path = "/coverage/{lon};{lat}/calendars"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "start_date": startDate, 
            "end_date": endDate, 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "distance": distance?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Calendars>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageLonLatCalendarsId(lat: Double, lon: Double, _id: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, completion: @escaping ((_ data: Calendars?,_ error: Error?) -> Void)) {
        getCoverageLonLatCalendarsIdWithRequestBuilder(lat: lat, lon: lon, _id: _id, depth: depth, count: count, startPage: startPage, startDate: startDate, endDate: endDate, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, distance: distance).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatCalendarsIdWithRequestBuilder(lat: Double, lon: Double, _id: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil) -> RequestBuilder<Calendars> {
        var path = "/coverage/{lon};{lat}/calendars/{id}"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "start_date": startDate, 
            "end_date": endDate, 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "distance": distance?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Calendars>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageLonLatUriCalendars(lat: Double, lon: Double, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, completion: @escaping ((_ data: Calendars?,_ error: Error?) -> Void)) {
        getCoverageLonLatUriCalendarsWithRequestBuilder(lat: lat, lon: lon, uri: uri, depth: depth, count: count, startPage: startPage, startDate: startDate, endDate: endDate, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, distance: distance).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatUriCalendarsWithRequestBuilder(lat: Double, lon: Double, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil) -> RequestBuilder<Calendars> {
        var path = "/coverage/{lon};{lat}/{uri}/calendars"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let uriPreEscape = "\(uri)"
        let uriPostEscape = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "start_date": startDate, 
            "end_date": endDate, 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "distance": distance?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Calendars>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageRegionCalendars(region: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, completion: @escaping ((_ data: Calendars?,_ error: Error?) -> Void)) {
        getCoverageRegionCalendarsWithRequestBuilder(region: region, depth: depth, count: count, startPage: startPage, startDate: startDate, endDate: endDate, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, distance: distance).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionCalendarsWithRequestBuilder(region: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil) -> RequestBuilder<Calendars> {
        var path = "/coverage/{region}/calendars"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "start_date": startDate, 
            "end_date": endDate, 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "distance": distance?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Calendars>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageRegionCalendarsId(region: String, _id: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, completion: @escaping ((_ data: Calendars?,_ error: Error?) -> Void)) {
        getCoverageRegionCalendarsIdWithRequestBuilder(region: region, _id: _id, depth: depth, count: count, startPage: startPage, startDate: startDate, endDate: endDate, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, distance: distance).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionCalendarsIdWithRequestBuilder(region: String, _id: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil) -> RequestBuilder<Calendars> {
        var path = "/coverage/{region}/calendars/{id}"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "start_date": startDate, 
            "end_date": endDate, 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "distance": distance?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Calendars>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageRegionUriCalendars(region: String, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, completion: @escaping ((_ data: Calendars?,_ error: Error?) -> Void)) {
        getCoverageRegionUriCalendarsWithRequestBuilder(region: region, uri: uri, depth: depth, count: count, startPage: startPage, startDate: startDate, endDate: endDate, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, distance: distance).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionUriCalendarsWithRequestBuilder(region: String, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, startDate: String? = nil, endDate: String? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil) -> RequestBuilder<Calendars> {
        var path = "/coverage/{region}/{uri}/calendars"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let uriPreEscape = "\(uri)"
        let uriPostEscape = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "start_date": startDate, 
            "end_date": endDate, 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "distance": distance?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Calendars>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

}
