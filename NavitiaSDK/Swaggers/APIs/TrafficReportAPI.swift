//
// TrafficReportAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class TrafficReportAPI {

    open class func getCoverageLonLatTrafficReports(lat: Double, lon: Double, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, disableGeojson: Bool? = nil, tags: [String]? = nil, completion: @escaping ((_ data: TrafficReports?,_ error: Error?) -> Void)) {
        getCoverageLonLatTrafficReportsWithRequestBuilder(lat: lat, lon: lon, depth: depth, count: count, startPage: startPage, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, distance: distance, disableGeojson: disableGeojson, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatTrafficReportsWithRequestBuilder(lat: Double, lon: Double, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, disableGeojson: Bool? = nil, tags: [String]? = nil) -> RequestBuilder<TrafficReports> {
        var path = "/coverage/{lon};{lat}/traffic_reports"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "distance": distance?.encodeToJSON(), 
            "disable_geojson": disableGeojson, 
            "tags[]": tags
        ])

        let requestBuilder: RequestBuilder<TrafficReports>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageLonLatUriTrafficReports(lat: Double, lon: Double, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, disableGeojson: Bool? = nil, tags: [String]? = nil, completion: @escaping ((_ data: TrafficReports?,_ error: Error?) -> Void)) {
        getCoverageLonLatUriTrafficReportsWithRequestBuilder(lat: lat, lon: lon, uri: uri, depth: depth, count: count, startPage: startPage, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, distance: distance, disableGeojson: disableGeojson, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatUriTrafficReportsWithRequestBuilder(lat: Double, lon: Double, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, disableGeojson: Bool? = nil, tags: [String]? = nil) -> RequestBuilder<TrafficReports> {
        var path = "/coverage/{lon};{lat}/{uri}/traffic_reports"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let uriPreEscape = "\(uri)"
        let uriPostEscape = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "distance": distance?.encodeToJSON(), 
            "disable_geojson": disableGeojson, 
            "tags[]": tags
        ])

        let requestBuilder: RequestBuilder<TrafficReports>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageRegionTrafficReports(region: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, disableGeojson: Bool? = nil, tags: [String]? = nil, completion: @escaping ((_ data: TrafficReports?,_ error: Error?) -> Void)) {
        getCoverageRegionTrafficReportsWithRequestBuilder(region: region, depth: depth, count: count, startPage: startPage, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, distance: distance, disableGeojson: disableGeojson, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionTrafficReportsWithRequestBuilder(region: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, disableGeojson: Bool? = nil, tags: [String]? = nil) -> RequestBuilder<TrafficReports> {
        var path = "/coverage/{region}/traffic_reports"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "distance": distance?.encodeToJSON(), 
            "disable_geojson": disableGeojson, 
            "tags[]": tags
        ])

        let requestBuilder: RequestBuilder<TrafficReports>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageRegionUriTrafficReports(region: String, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, disableGeojson: Bool? = nil, tags: [String]? = nil, completion: @escaping ((_ data: TrafficReports?,_ error: Error?) -> Void)) {
        getCoverageRegionUriTrafficReportsWithRequestBuilder(region: region, uri: uri, depth: depth, count: count, startPage: startPage, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, distance: distance, disableGeojson: disableGeojson, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionUriTrafficReportsWithRequestBuilder(region: String, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, distance: Int? = nil, disableGeojson: Bool? = nil, tags: [String]? = nil) -> RequestBuilder<TrafficReports> {
        var path = "/coverage/{region}/{uri}/traffic_reports"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let uriPreEscape = "\(uri)"
        let uriPostEscape = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "distance": distance?.encodeToJSON(), 
            "disable_geojson": disableGeojson, 
            "tags[]": tags
        ])

        let requestBuilder: RequestBuilder<TrafficReports>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

}
