//
// PlaceUriAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class PlaceUriAPI {
    public enum AddPoiInfos_getCoverageLonLatPlacesId: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }


    open class func getCoverageLonLatPlacesId(lat: Double, lon: Double, _id: String, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil, completion: @escaping ((_ data: Places?,_ error: Error?) -> Void)) {
        getCoverageLonLatPlacesIdWithRequestBuilder(lat: lat, lon: lon, _id: _id, bssStands: bssStands, addPoiInfos: addPoiInfos, disableGeojson: disableGeojson, disableDisruption: disableDisruption).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatPlacesIdWithRequestBuilder(lat: Double, lon: Double, _id: String, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil) -> RequestBuilder<Places> {
        var path = "/coverage/{lon};{lat}/places/{id}"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "bss_stands": bssStands, 
            "add_poi_infos[]": addPoiInfos, 
            "disable_geojson": disableGeojson, 
            "disable_disruption": disableDisruption
        ])

        let requestBuilder: RequestBuilder<Places>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum AddPoiInfos_getCoverageRegionPlacesId: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }


    open class func getCoverageRegionPlacesId(region: String, _id: String, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil, completion: @escaping ((_ data: Places?,_ error: Error?) -> Void)) {
        getCoverageRegionPlacesIdWithRequestBuilder(region: region, _id: _id, bssStands: bssStands, addPoiInfos: addPoiInfos, disableGeojson: disableGeojson, disableDisruption: disableDisruption).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionPlacesIdWithRequestBuilder(region: String, _id: String, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil) -> RequestBuilder<Places> {
        var path = "/coverage/{region}/places/{id}"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "bss_stands": bssStands, 
            "add_poi_infos[]": addPoiInfos, 
            "disable_geojson": disableGeojson, 
            "disable_disruption": disableDisruption
        ])

        let requestBuilder: RequestBuilder<Places>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum AddPoiInfos_getPlacesId: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }


    open class func getPlacesId(_id: String, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil, completion: @escaping ((_ data: Places?,_ error: Error?) -> Void)) {
        getPlacesIdWithRequestBuilder(_id: _id, bssStands: bssStands, addPoiInfos: addPoiInfos, disableGeojson: disableGeojson, disableDisruption: disableDisruption).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getPlacesIdWithRequestBuilder(_id: String, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil) -> RequestBuilder<Places> {
        var path = "/places/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "bss_stands": bssStands, 
            "add_poi_infos[]": addPoiInfos, 
            "disable_geojson": disableGeojson, 
            "disable_disruption": disableDisruption
        ])

        let requestBuilder: RequestBuilder<Places>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

}
