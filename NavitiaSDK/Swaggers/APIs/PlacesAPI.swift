//
// PlacesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class PlacesAPI {
    public enum ModelType_getCoverageLonLatPlaces: String { 
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }


    open class func getCoverageLonLatPlaces(q: String, lat: Double, lon: Double, type: [String]? = nil, count: Int? = nil, adminUri: [String]? = nil, depth: Int? = nil, disableGeojson: Bool? = nil, from: String? = nil, shape: String? = nil, completion: @escaping ((_ data: Places?,_ error: Error?) -> Void)) {
        getCoverageLonLatPlacesWithRequestBuilder(q: q, lat: lat, lon: lon, type: type, count: count, adminUri: adminUri, depth: depth, disableGeojson: disableGeojson, from: from, shape: shape).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatPlacesWithRequestBuilder(q: String, lat: Double, lon: Double, type: [String]? = nil, count: Int? = nil, adminUri: [String]? = nil, depth: Int? = nil, disableGeojson: Bool? = nil, from: String? = nil, shape: String? = nil) -> RequestBuilder<Places> {
        var path = "/coverage/{lon};{lat}/places"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q, 
            "type[]": type, 
            "count": count?.encodeToJSON(), 
            "admin_uri[]": adminUri, 
            "depth": depth?.encodeToJSON(), 
            "disable_geojson": disableGeojson, 
            "from": from, 
            "shape": shape
        ])

        let requestBuilder: RequestBuilder<Places>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum ModelType_getCoverageRegionPlaces: String { 
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }


    open class func getCoverageRegionPlaces(q: String, region: String, type: [String]? = nil, count: Int? = nil, adminUri: [String]? = nil, depth: Int? = nil, disableGeojson: Bool? = nil, from: String? = nil, shape: String? = nil, completion: @escaping ((_ data: Places?,_ error: Error?) -> Void)) {
        getCoverageRegionPlacesWithRequestBuilder(q: q, region: region, type: type, count: count, adminUri: adminUri, depth: depth, disableGeojson: disableGeojson, from: from, shape: shape).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionPlacesWithRequestBuilder(q: String, region: String, type: [String]? = nil, count: Int? = nil, adminUri: [String]? = nil, depth: Int? = nil, disableGeojson: Bool? = nil, from: String? = nil, shape: String? = nil) -> RequestBuilder<Places> {
        var path = "/coverage/{region}/places"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q, 
            "type[]": type, 
            "count": count?.encodeToJSON(), 
            "admin_uri[]": adminUri, 
            "depth": depth?.encodeToJSON(), 
            "disable_geojson": disableGeojson, 
            "from": from, 
            "shape": shape
        ])

        let requestBuilder: RequestBuilder<Places>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum ModelType_getPlaces: String { 
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }


    open class func getPlaces(q: String, type: [String]? = nil, count: Int? = nil, adminUri: [String]? = nil, depth: Int? = nil, disableGeojson: Bool? = nil, from: String? = nil, shape: String? = nil, completion: @escaping ((_ data: Places?,_ error: Error?) -> Void)) {
        getPlacesWithRequestBuilder(q: q, type: type, count: count, adminUri: adminUri, depth: depth, disableGeojson: disableGeojson, from: from, shape: shape).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getPlacesWithRequestBuilder(q: String, type: [String]? = nil, count: Int? = nil, adminUri: [String]? = nil, depth: Int? = nil, disableGeojson: Bool? = nil, from: String? = nil, shape: String? = nil) -> RequestBuilder<Places> {
        let path = "/places"
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q, 
            "type[]": type, 
            "count": count?.encodeToJSON(), 
            "admin_uri[]": adminUri, 
            "depth": depth?.encodeToJSON(), 
            "disable_geojson": disableGeojson, 
            "from": from, 
            "shape": shape
        ])

        let requestBuilder: RequestBuilder<Places>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

}
