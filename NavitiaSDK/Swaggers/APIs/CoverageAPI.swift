//
// CoverageAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class CoverageAPI {

    open class func getCoverage(disableGeojson: Bool? = nil, completion: @escaping ((_ data: Coverages?,_ error: Error?) -> Void)) {
        getCoverageWithRequestBuilder(disableGeojson: disableGeojson).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageWithRequestBuilder(disableGeojson: Bool? = nil) -> RequestBuilder<Coverages> {
        let path = "/coverage/"
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "disable_geojson": disableGeojson
        ])

        let requestBuilder: RequestBuilder<Coverages>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageLonLat(lat: Double, lon: Double, disableGeojson: Bool? = nil, completion: @escaping ((_ data: Coverages?,_ error: Error?) -> Void)) {
        getCoverageLonLatWithRequestBuilder(lat: lat, lon: lon, disableGeojson: disableGeojson).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatWithRequestBuilder(lat: Double, lon: Double, disableGeojson: Bool? = nil) -> RequestBuilder<Coverages> {
        var path = "/coverage/{lon};{lat}/"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "disable_geojson": disableGeojson
        ])

        let requestBuilder: RequestBuilder<Coverages>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageRegion(region: String, disableGeojson: Bool? = nil, completion: @escaping ((_ data: Coverages?,_ error: Error?) -> Void)) {
        getCoverageRegionWithRequestBuilder(region: region, disableGeojson: disableGeojson).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionWithRequestBuilder(region: String, disableGeojson: Bool? = nil) -> RequestBuilder<Coverages> {
        var path = "/coverage/{region}/"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "disable_geojson": disableGeojson
        ])

        let requestBuilder: RequestBuilder<Coverages>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

}
