//
// PlacesNearbyAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class PlacesNearbyAPI {
    public enum ModelType_getCoordLonLatPlacesNearby: String { 
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }

    public enum AddPoiInfos_getCoordLonLatPlacesNearby: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }


    open class func getCoordLonLatPlacesNearby(lat: Double, lon: Double, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil, completion: @escaping ((_ data: PlacesNearby?,_ error: Error?) -> Void)) {
        getCoordLonLatPlacesNearbyWithRequestBuilder(lat: lat, lon: lon, type: type, filter: filter, distance: distance, count: count, depth: depth, startPage: startPage, bssStands: bssStands, addPoiInfos: addPoiInfos, disableGeojson: disableGeojson, disableDisruption: disableDisruption).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoordLonLatPlacesNearbyWithRequestBuilder(lat: Double, lon: Double, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil) -> RequestBuilder<PlacesNearby> {
        var path = "/coord/{lon};{lat}/places_nearby"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type[]": type, 
            "filter": filter, 
            "distance": distance?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "depth": depth?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "bss_stands": bssStands, 
            "add_poi_infos[]": addPoiInfos, 
            "disable_geojson": disableGeojson, 
            "disable_disruption": disableDisruption
        ])

        let requestBuilder: RequestBuilder<PlacesNearby>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum ModelType_getCoordsLonLatPlacesNearby: String { 
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }

    public enum AddPoiInfos_getCoordsLonLatPlacesNearby: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }


    open class func getCoordsLonLatPlacesNearby(lat: Double, lon: Double, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil, completion: @escaping ((_ data: PlacesNearby?,_ error: Error?) -> Void)) {
        getCoordsLonLatPlacesNearbyWithRequestBuilder(lat: lat, lon: lon, type: type, filter: filter, distance: distance, count: count, depth: depth, startPage: startPage, bssStands: bssStands, addPoiInfos: addPoiInfos, disableGeojson: disableGeojson, disableDisruption: disableDisruption).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoordsLonLatPlacesNearbyWithRequestBuilder(lat: Double, lon: Double, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil) -> RequestBuilder<PlacesNearby> {
        var path = "/coords/{lon};{lat}/places_nearby"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type[]": type, 
            "filter": filter, 
            "distance": distance?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "depth": depth?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "bss_stands": bssStands, 
            "add_poi_infos[]": addPoiInfos, 
            "disable_geojson": disableGeojson, 
            "disable_disruption": disableDisruption
        ])

        let requestBuilder: RequestBuilder<PlacesNearby>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum ModelType_getCoverageLonLatPlacesNearby: String { 
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }

    public enum AddPoiInfos_getCoverageLonLatPlacesNearby: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }


    open class func getCoverageLonLatPlacesNearby(lat: Double, lon: Double, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil, completion: @escaping ((_ data: PlacesNearby?,_ error: Error?) -> Void)) {
        getCoverageLonLatPlacesNearbyWithRequestBuilder(lat: lat, lon: lon, type: type, filter: filter, distance: distance, count: count, depth: depth, startPage: startPage, bssStands: bssStands, addPoiInfos: addPoiInfos, disableGeojson: disableGeojson, disableDisruption: disableDisruption).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatPlacesNearbyWithRequestBuilder(lat: Double, lon: Double, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil) -> RequestBuilder<PlacesNearby> {
        var path = "/coverage/{lon};{lat}/places_nearby"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type[]": type, 
            "filter": filter, 
            "distance": distance?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "depth": depth?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "bss_stands": bssStands, 
            "add_poi_infos[]": addPoiInfos, 
            "disable_geojson": disableGeojson, 
            "disable_disruption": disableDisruption
        ])

        let requestBuilder: RequestBuilder<PlacesNearby>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum ModelType_getCoverageLonLatUriPlacesNearby: String { 
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }

    public enum AddPoiInfos_getCoverageLonLatUriPlacesNearby: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }


    open class func getCoverageLonLatUriPlacesNearby(lat: Double, lon: Double, uri: String, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil, completion: @escaping ((_ data: PlacesNearby?,_ error: Error?) -> Void)) {
        getCoverageLonLatUriPlacesNearbyWithRequestBuilder(lat: lat, lon: lon, uri: uri, type: type, filter: filter, distance: distance, count: count, depth: depth, startPage: startPage, bssStands: bssStands, addPoiInfos: addPoiInfos, disableGeojson: disableGeojson, disableDisruption: disableDisruption).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatUriPlacesNearbyWithRequestBuilder(lat: Double, lon: Double, uri: String, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil) -> RequestBuilder<PlacesNearby> {
        var path = "/coverage/{lon};{lat}/{uri}/places_nearby"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let uriPreEscape = "\(uri)"
        let uriPostEscape = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type[]": type, 
            "filter": filter, 
            "distance": distance?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "depth": depth?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "bss_stands": bssStands, 
            "add_poi_infos[]": addPoiInfos, 
            "disable_geojson": disableGeojson, 
            "disable_disruption": disableDisruption
        ])

        let requestBuilder: RequestBuilder<PlacesNearby>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum ModelType_getCoverageRegionPlacesNearby: String { 
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }

    public enum AddPoiInfos_getCoverageRegionPlacesNearby: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }


    open class func getCoverageRegionPlacesNearby(region: String, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil, completion: @escaping ((_ data: PlacesNearby?,_ error: Error?) -> Void)) {
        getCoverageRegionPlacesNearbyWithRequestBuilder(region: region, type: type, filter: filter, distance: distance, count: count, depth: depth, startPage: startPage, bssStands: bssStands, addPoiInfos: addPoiInfos, disableGeojson: disableGeojson, disableDisruption: disableDisruption).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionPlacesNearbyWithRequestBuilder(region: String, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil) -> RequestBuilder<PlacesNearby> {
        var path = "/coverage/{region}/places_nearby"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type[]": type, 
            "filter": filter, 
            "distance": distance?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "depth": depth?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "bss_stands": bssStands, 
            "add_poi_infos[]": addPoiInfos, 
            "disable_geojson": disableGeojson, 
            "disable_disruption": disableDisruption
        ])

        let requestBuilder: RequestBuilder<PlacesNearby>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum ModelType_getCoverageRegionUriPlacesNearby: String { 
        case stopPoint = "stop_point"
        case poi = "poi"
        case administrativeRegion = "administrative_region"
        case stopArea = "stop_area"
        case address = "address"
    }

    public enum AddPoiInfos_getCoverageRegionUriPlacesNearby: String { 
        case bssStands = "bss_stands"
        case carPark = "car_park"
        case empty = ""
        case _none = "none"
    }


    open class func getCoverageRegionUriPlacesNearby(region: String, uri: String, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil, completion: @escaping ((_ data: PlacesNearby?,_ error: Error?) -> Void)) {
        getCoverageRegionUriPlacesNearbyWithRequestBuilder(region: region, uri: uri, type: type, filter: filter, distance: distance, count: count, depth: depth, startPage: startPage, bssStands: bssStands, addPoiInfos: addPoiInfos, disableGeojson: disableGeojson, disableDisruption: disableDisruption).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionUriPlacesNearbyWithRequestBuilder(region: String, uri: String, type: [String]? = nil, filter: String? = nil, distance: Int? = nil, count: Int? = nil, depth: Int? = nil, startPage: Int? = nil, bssStands: Bool? = nil, addPoiInfos: [String]? = nil, disableGeojson: Bool? = nil, disableDisruption: Bool? = nil) -> RequestBuilder<PlacesNearby> {
        var path = "/coverage/{region}/{uri}/places_nearby"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let uriPreEscape = "\(uri)"
        let uriPostEscape = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "type[]": type, 
            "filter": filter, 
            "distance": distance?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "depth": depth?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "bss_stands": bssStands, 
            "add_poi_infos[]": addPoiInfos, 
            "disable_geojson": disableGeojson, 
            "disable_disruption": disableDisruption
        ])

        let requestBuilder: RequestBuilder<PlacesNearby>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

}
