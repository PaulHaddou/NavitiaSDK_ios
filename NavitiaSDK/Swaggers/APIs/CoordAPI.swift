//
// CoordAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class CoordAPI {

    open class func getCoordLonLat(lat: Double, lon: Double, completion: @escaping ((_ data: DictAddresses?,_ error: Error?) -> Void)) {
        getCoordLonLatWithRequestBuilder(lat: lat, lon: lon).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoordLonLatWithRequestBuilder(lat: Double, lon: Double) -> RequestBuilder<DictAddresses> {
        var path = "/coord/{lon};{lat}/"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DictAddresses>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoordsLonLat(lat: Double, lon: Double, completion: @escaping ((_ data: DictAddresses?,_ error: Error?) -> Void)) {
        getCoordsLonLatWithRequestBuilder(lat: lat, lon: lon).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoordsLonLatWithRequestBuilder(lat: Double, lon: Double) -> RequestBuilder<DictAddresses> {
        var path = "/coords/{lon};{lat}/"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DictAddresses>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

}
