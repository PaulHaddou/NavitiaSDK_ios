//
// LineReportsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class LineReportsAPI {

    open class func getCoverageLonLatLineReports(lat: Double, lon: Double, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenUris: [String]? = nil, disableGeojson: Bool? = nil, since: Date? = nil, until: Date? = nil, tags: [String]? = nil, completion: @escaping ((_ data: LineReports?,_ error: Error?) -> Void)) {
        getCoverageLonLatLineReportsWithRequestBuilder(lat: lat, lon: lon, depth: depth, count: count, startPage: startPage, forbiddenUris: forbiddenUris, disableGeojson: disableGeojson, since: since, until: until, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatLineReportsWithRequestBuilder(lat: Double, lon: Double, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenUris: [String]? = nil, disableGeojson: Bool? = nil, since: Date? = nil, until: Date? = nil, tags: [String]? = nil) -> RequestBuilder<LineReports> {
        var path = "/coverage/{lon};{lat}/line_reports"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "forbidden_uris[]": forbiddenUris, 
            "disable_geojson": disableGeojson, 
            "since": since?.encodeToJSON(), 
            "until": until?.encodeToJSON(), 
            "tags[]": tags
        ])

        let requestBuilder: RequestBuilder<LineReports>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageLonLatUriLineReports(lat: Double, lon: Double, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenUris: [String]? = nil, disableGeojson: Bool? = nil, since: Date? = nil, until: Date? = nil, tags: [String]? = nil, completion: @escaping ((_ data: LineReports?,_ error: Error?) -> Void)) {
        getCoverageLonLatUriLineReportsWithRequestBuilder(lat: lat, lon: lon, uri: uri, depth: depth, count: count, startPage: startPage, forbiddenUris: forbiddenUris, disableGeojson: disableGeojson, since: since, until: until, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatUriLineReportsWithRequestBuilder(lat: Double, lon: Double, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenUris: [String]? = nil, disableGeojson: Bool? = nil, since: Date? = nil, until: Date? = nil, tags: [String]? = nil) -> RequestBuilder<LineReports> {
        var path = "/coverage/{lon};{lat}/{uri}/line_reports"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let uriPreEscape = "\(uri)"
        let uriPostEscape = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "forbidden_uris[]": forbiddenUris, 
            "disable_geojson": disableGeojson, 
            "since": since?.encodeToJSON(), 
            "until": until?.encodeToJSON(), 
            "tags[]": tags
        ])

        let requestBuilder: RequestBuilder<LineReports>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageRegionLineReports(region: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenUris: [String]? = nil, disableGeojson: Bool? = nil, since: Date? = nil, until: Date? = nil, tags: [String]? = nil, completion: @escaping ((_ data: LineReports?,_ error: Error?) -> Void)) {
        getCoverageRegionLineReportsWithRequestBuilder(region: region, depth: depth, count: count, startPage: startPage, forbiddenUris: forbiddenUris, disableGeojson: disableGeojson, since: since, until: until, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionLineReportsWithRequestBuilder(region: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenUris: [String]? = nil, disableGeojson: Bool? = nil, since: Date? = nil, until: Date? = nil, tags: [String]? = nil) -> RequestBuilder<LineReports> {
        var path = "/coverage/{region}/line_reports"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "forbidden_uris[]": forbiddenUris, 
            "disable_geojson": disableGeojson, 
            "since": since?.encodeToJSON(), 
            "until": until?.encodeToJSON(), 
            "tags[]": tags
        ])

        let requestBuilder: RequestBuilder<LineReports>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }


    open class func getCoverageRegionUriLineReports(region: String, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenUris: [String]? = nil, disableGeojson: Bool? = nil, since: Date? = nil, until: Date? = nil, tags: [String]? = nil, completion: @escaping ((_ data: LineReports?,_ error: Error?) -> Void)) {
        getCoverageRegionUriLineReportsWithRequestBuilder(region: region, uri: uri, depth: depth, count: count, startPage: startPage, forbiddenUris: forbiddenUris, disableGeojson: disableGeojson, since: since, until: until, tags: tags).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionUriLineReportsWithRequestBuilder(region: String, uri: String, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, forbiddenUris: [String]? = nil, disableGeojson: Bool? = nil, since: Date? = nil, until: Date? = nil, tags: [String]? = nil) -> RequestBuilder<LineReports> {
        var path = "/coverage/{region}/{uri}/line_reports"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let uriPreEscape = "\(uri)"
        let uriPostEscape = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "forbidden_uris[]": forbiddenUris, 
            "disable_geojson": disableGeojson, 
            "since": since?.encodeToJSON(), 
            "until": until?.encodeToJSON(), 
            "tags[]": tags
        ])

        let requestBuilder: RequestBuilder<LineReports>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

}
