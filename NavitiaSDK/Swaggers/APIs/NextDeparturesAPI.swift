//
// NextDeparturesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class NextDeparturesAPI {
    public enum DataFreshness_getCoverageLonLatDepartures: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }


    open class func getCoverageLonLatDepartures(lat: Double, lon: Double, filter: String? = nil, fromDatetime: Date? = nil, untilDatetime: Date? = nil, duration: Int? = nil, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, maxDateTimes: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, calendar: String? = nil, distance: Int? = nil, showCodes: Bool? = nil, dataFreshness: DataFreshness_getCoverageLonLatDepartures? = nil, itemsPerSchedule: Int? = nil, disableGeojson: Bool? = nil, completion: @escaping ((_ data: Departures?,_ error: Error?) -> Void)) {
        getCoverageLonLatDeparturesWithRequestBuilder(lat: lat, lon: lon, filter: filter, fromDatetime: fromDatetime, untilDatetime: untilDatetime, duration: duration, depth: depth, count: count, startPage: startPage, maxDateTimes: maxDateTimes, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, calendar: calendar, distance: distance, showCodes: showCodes, dataFreshness: dataFreshness, itemsPerSchedule: itemsPerSchedule, disableGeojson: disableGeojson).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatDeparturesWithRequestBuilder(lat: Double, lon: Double, filter: String? = nil, fromDatetime: Date? = nil, untilDatetime: Date? = nil, duration: Int? = nil, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, maxDateTimes: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, calendar: String? = nil, distance: Int? = nil, showCodes: Bool? = nil, dataFreshness: DataFreshness_getCoverageLonLatDepartures? = nil, itemsPerSchedule: Int? = nil, disableGeojson: Bool? = nil) -> RequestBuilder<Departures> {
        var path = "/coverage/{lon};{lat}/departures"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter, 
            "from_datetime": fromDatetime?.encodeToJSON(), 
            "until_datetime": untilDatetime?.encodeToJSON(), 
            "duration": duration?.encodeToJSON(), 
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "max_date_times": maxDateTimes?.encodeToJSON(), 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "calendar": calendar, 
            "distance": distance?.encodeToJSON(), 
            "show_codes": showCodes, 
            "data_freshness": dataFreshness?.rawValue, 
            "items_per_schedule": itemsPerSchedule?.encodeToJSON(), 
            "disable_geojson": disableGeojson
        ])

        let requestBuilder: RequestBuilder<Departures>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum DataFreshness_getCoverageLonLatUriDepartures: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }


    open class func getCoverageLonLatUriDepartures(lat: Double, lon: Double, uri: String, filter: String? = nil, fromDatetime: Date? = nil, untilDatetime: Date? = nil, duration: Int? = nil, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, maxDateTimes: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, calendar: String? = nil, distance: Int? = nil, showCodes: Bool? = nil, dataFreshness: DataFreshness_getCoverageLonLatUriDepartures? = nil, itemsPerSchedule: Int? = nil, disableGeojson: Bool? = nil, completion: @escaping ((_ data: Departures?,_ error: Error?) -> Void)) {
        getCoverageLonLatUriDeparturesWithRequestBuilder(lat: lat, lon: lon, uri: uri, filter: filter, fromDatetime: fromDatetime, untilDatetime: untilDatetime, duration: duration, depth: depth, count: count, startPage: startPage, maxDateTimes: maxDateTimes, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, calendar: calendar, distance: distance, showCodes: showCodes, dataFreshness: dataFreshness, itemsPerSchedule: itemsPerSchedule, disableGeojson: disableGeojson).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatUriDeparturesWithRequestBuilder(lat: Double, lon: Double, uri: String, filter: String? = nil, fromDatetime: Date? = nil, untilDatetime: Date? = nil, duration: Int? = nil, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, maxDateTimes: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, calendar: String? = nil, distance: Int? = nil, showCodes: Bool? = nil, dataFreshness: DataFreshness_getCoverageLonLatUriDepartures? = nil, itemsPerSchedule: Int? = nil, disableGeojson: Bool? = nil) -> RequestBuilder<Departures> {
        var path = "/coverage/{lon};{lat}/{uri}/departures"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let uriPreEscape = "\(uri)"
        let uriPostEscape = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter, 
            "from_datetime": fromDatetime?.encodeToJSON(), 
            "until_datetime": untilDatetime?.encodeToJSON(), 
            "duration": duration?.encodeToJSON(), 
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "max_date_times": maxDateTimes?.encodeToJSON(), 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "calendar": calendar, 
            "distance": distance?.encodeToJSON(), 
            "show_codes": showCodes, 
            "data_freshness": dataFreshness?.rawValue, 
            "items_per_schedule": itemsPerSchedule?.encodeToJSON(), 
            "disable_geojson": disableGeojson
        ])

        let requestBuilder: RequestBuilder<Departures>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum DataFreshness_getCoverageRegionDepartures: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }


    open class func getCoverageRegionDepartures(region: String, filter: String? = nil, fromDatetime: Date? = nil, untilDatetime: Date? = nil, duration: Int? = nil, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, maxDateTimes: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, calendar: String? = nil, distance: Int? = nil, showCodes: Bool? = nil, dataFreshness: DataFreshness_getCoverageRegionDepartures? = nil, itemsPerSchedule: Int? = nil, disableGeojson: Bool? = nil, completion: @escaping ((_ data: Departures?,_ error: Error?) -> Void)) {
        getCoverageRegionDeparturesWithRequestBuilder(region: region, filter: filter, fromDatetime: fromDatetime, untilDatetime: untilDatetime, duration: duration, depth: depth, count: count, startPage: startPage, maxDateTimes: maxDateTimes, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, calendar: calendar, distance: distance, showCodes: showCodes, dataFreshness: dataFreshness, itemsPerSchedule: itemsPerSchedule, disableGeojson: disableGeojson).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionDeparturesWithRequestBuilder(region: String, filter: String? = nil, fromDatetime: Date? = nil, untilDatetime: Date? = nil, duration: Int? = nil, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, maxDateTimes: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, calendar: String? = nil, distance: Int? = nil, showCodes: Bool? = nil, dataFreshness: DataFreshness_getCoverageRegionDepartures? = nil, itemsPerSchedule: Int? = nil, disableGeojson: Bool? = nil) -> RequestBuilder<Departures> {
        var path = "/coverage/{region}/departures"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter, 
            "from_datetime": fromDatetime?.encodeToJSON(), 
            "until_datetime": untilDatetime?.encodeToJSON(), 
            "duration": duration?.encodeToJSON(), 
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "max_date_times": maxDateTimes?.encodeToJSON(), 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "calendar": calendar, 
            "distance": distance?.encodeToJSON(), 
            "show_codes": showCodes, 
            "data_freshness": dataFreshness?.rawValue, 
            "items_per_schedule": itemsPerSchedule?.encodeToJSON(), 
            "disable_geojson": disableGeojson
        ])

        let requestBuilder: RequestBuilder<Departures>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum DataFreshness_getCoverageRegionUriDepartures: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }


    open class func getCoverageRegionUriDepartures(region: String, uri: String, filter: String? = nil, fromDatetime: Date? = nil, untilDatetime: Date? = nil, duration: Int? = nil, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, maxDateTimes: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, calendar: String? = nil, distance: Int? = nil, showCodes: Bool? = nil, dataFreshness: DataFreshness_getCoverageRegionUriDepartures? = nil, itemsPerSchedule: Int? = nil, disableGeojson: Bool? = nil, completion: @escaping ((_ data: Departures?,_ error: Error?) -> Void)) {
        getCoverageRegionUriDeparturesWithRequestBuilder(region: region, uri: uri, filter: filter, fromDatetime: fromDatetime, untilDatetime: untilDatetime, duration: duration, depth: depth, count: count, startPage: startPage, maxDateTimes: maxDateTimes, forbiddenId: forbiddenId, forbiddenUris: forbiddenUris, calendar: calendar, distance: distance, showCodes: showCodes, dataFreshness: dataFreshness, itemsPerSchedule: itemsPerSchedule, disableGeojson: disableGeojson).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionUriDeparturesWithRequestBuilder(region: String, uri: String, filter: String? = nil, fromDatetime: Date? = nil, untilDatetime: Date? = nil, duration: Int? = nil, depth: Int? = nil, count: Int? = nil, startPage: Int? = nil, maxDateTimes: Int? = nil, forbiddenId: [String]? = nil, forbiddenUris: [String]? = nil, calendar: String? = nil, distance: Int? = nil, showCodes: Bool? = nil, dataFreshness: DataFreshness_getCoverageRegionUriDepartures? = nil, itemsPerSchedule: Int? = nil, disableGeojson: Bool? = nil) -> RequestBuilder<Departures> {
        var path = "/coverage/{region}/{uri}/departures"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let uriPreEscape = "\(uri)"
        let uriPostEscape = uriPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{uri}", with: uriPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": filter, 
            "from_datetime": fromDatetime?.encodeToJSON(), 
            "until_datetime": untilDatetime?.encodeToJSON(), 
            "duration": duration?.encodeToJSON(), 
            "depth": depth?.encodeToJSON(), 
            "count": count?.encodeToJSON(), 
            "start_page": startPage?.encodeToJSON(), 
            "max_date_times": maxDateTimes?.encodeToJSON(), 
            "forbidden_id[]": forbiddenId, 
            "forbidden_uris[]": forbiddenUris, 
            "calendar": calendar, 
            "distance": distance?.encodeToJSON(), 
            "show_codes": showCodes, 
            "data_freshness": dataFreshness?.rawValue, 
            "items_per_schedule": itemsPerSchedule?.encodeToJSON(), 
            "disable_geojson": disableGeojson
        ])

        let requestBuilder: RequestBuilder<Departures>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

}
