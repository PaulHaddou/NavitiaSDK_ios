//
// HeatMapAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


open class HeatMapAPI {
    public enum DatetimeRepresents_getCoverageLonLatHeatMaps: String { 
        case arrival = "arrival"
        case departure = "departure"
    }

    public enum FirstSectionMode_getCoverageLonLatHeatMaps: String { 
        case walking = "walking"
        case car = "car"
        case bike = "bike"
        case bss = "bss"
        case ridesharing = "ridesharing"
    }

    public enum LastSectionMode_getCoverageLonLatHeatMaps: String { 
        case walking = "walking"
        case car = "car"
        case bike = "bike"
        case bss = "bss"
        case ridesharing = "ridesharing"
    }

    public enum DataFreshness_getCoverageLonLatHeatMaps: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }

    public enum TravelerType_getCoverageLonLatHeatMaps: String { 
        case cyclist = "cyclist"
        case luggage = "luggage"
        case wheelchair = "wheelchair"
        case standard = "standard"
        case motorist = "motorist"
        case fastWalker = "fast_walker"
        case slowWalker = "slow_walker"
    }

    public enum DirectPath_getCoverageLonLatHeatMaps: String { 
        case indifferent = "indifferent"
        case only = "only"
        case _none = "none"
    }


    open class func getCoverageLonLatHeatMaps(lat: Double, lon: Double, from: String? = nil, to: String? = nil, datetime: Date? = nil, datetimeRepresents: DatetimeRepresents_getCoverageLonLatHeatMaps? = nil, maxNbTransfers: Int? = nil, minNbTransfers: Int? = nil, firstSectionMode: [String]? = nil, lastSectionMode: [String]? = nil, maxDurationToPt: Int? = nil, maxWalkingDurationToPt: Int? = nil, maxBikeDurationToPt: Int? = nil, maxBssDurationToPt: Int? = nil, maxCarDurationToPt: Int? = nil, maxRidesharingDurationToPt: Int? = nil, walkingSpeed: Float? = nil, bikeSpeed: Float? = nil, bssSpeed: Float? = nil, carSpeed: Float? = nil, ridesharingSpeed: Float? = nil, forbiddenUris: [String]? = nil, allowedId: [String]? = nil, disruptionActive: Bool? = nil, dataFreshness: DataFreshness_getCoverageLonLatHeatMaps? = nil, maxDuration: Int? = nil, wheelchair: Bool? = nil, travelerType: TravelerType_getCoverageLonLatHeatMaps? = nil, directPath: DirectPath_getCoverageLonLatHeatMaps? = nil, freeRadiusFrom: Int? = nil, freeRadiusTo: Int? = nil, resolution: Int? = nil, completion: @escaping ((_ data: HeatMap1?,_ error: Error?) -> Void)) {
        getCoverageLonLatHeatMapsWithRequestBuilder(lat: lat, lon: lon, from: from, to: to, datetime: datetime, datetimeRepresents: datetimeRepresents, maxNbTransfers: maxNbTransfers, minNbTransfers: minNbTransfers, firstSectionMode: firstSectionMode, lastSectionMode: lastSectionMode, maxDurationToPt: maxDurationToPt, maxWalkingDurationToPt: maxWalkingDurationToPt, maxBikeDurationToPt: maxBikeDurationToPt, maxBssDurationToPt: maxBssDurationToPt, maxCarDurationToPt: maxCarDurationToPt, maxRidesharingDurationToPt: maxRidesharingDurationToPt, walkingSpeed: walkingSpeed, bikeSpeed: bikeSpeed, bssSpeed: bssSpeed, carSpeed: carSpeed, ridesharingSpeed: ridesharingSpeed, forbiddenUris: forbiddenUris, allowedId: allowedId, disruptionActive: disruptionActive, dataFreshness: dataFreshness, maxDuration: maxDuration, wheelchair: wheelchair, travelerType: travelerType, directPath: directPath, freeRadiusFrom: freeRadiusFrom, freeRadiusTo: freeRadiusTo, resolution: resolution).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageLonLatHeatMapsWithRequestBuilder(lat: Double, lon: Double, from: String? = nil, to: String? = nil, datetime: Date? = nil, datetimeRepresents: DatetimeRepresents_getCoverageLonLatHeatMaps? = nil, maxNbTransfers: Int? = nil, minNbTransfers: Int? = nil, firstSectionMode: [String]? = nil, lastSectionMode: [String]? = nil, maxDurationToPt: Int? = nil, maxWalkingDurationToPt: Int? = nil, maxBikeDurationToPt: Int? = nil, maxBssDurationToPt: Int? = nil, maxCarDurationToPt: Int? = nil, maxRidesharingDurationToPt: Int? = nil, walkingSpeed: Float? = nil, bikeSpeed: Float? = nil, bssSpeed: Float? = nil, carSpeed: Float? = nil, ridesharingSpeed: Float? = nil, forbiddenUris: [String]? = nil, allowedId: [String]? = nil, disruptionActive: Bool? = nil, dataFreshness: DataFreshness_getCoverageLonLatHeatMaps? = nil, maxDuration: Int? = nil, wheelchair: Bool? = nil, travelerType: TravelerType_getCoverageLonLatHeatMaps? = nil, directPath: DirectPath_getCoverageLonLatHeatMaps? = nil, freeRadiusFrom: Int? = nil, freeRadiusTo: Int? = nil, resolution: Int? = nil) -> RequestBuilder<HeatMap1> {
        var path = "/coverage/{lon};{lat}/heat_maps"
        let latPreEscape = "\(lat)"
        let latPostEscape = latPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lat}", with: latPostEscape, options: .literal, range: nil)
        let lonPreEscape = "\(lon)"
        let lonPostEscape = lonPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{lon}", with: lonPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from, 
            "to": to, 
            "datetime": datetime?.encodeToJSON(), 
            "datetime_represents": datetimeRepresents?.rawValue, 
            "max_nb_transfers": maxNbTransfers?.encodeToJSON(), 
            "min_nb_transfers": minNbTransfers?.encodeToJSON(), 
            "first_section_mode[]": firstSectionMode, 
            "last_section_mode[]": lastSectionMode, 
            "max_duration_to_pt": maxDurationToPt?.encodeToJSON(), 
            "max_walking_duration_to_pt": maxWalkingDurationToPt?.encodeToJSON(), 
            "max_bike_duration_to_pt": maxBikeDurationToPt?.encodeToJSON(), 
            "max_bss_duration_to_pt": maxBssDurationToPt?.encodeToJSON(), 
            "max_car_duration_to_pt": maxCarDurationToPt?.encodeToJSON(), 
            "max_ridesharing_duration_to_pt": maxRidesharingDurationToPt?.encodeToJSON(), 
            "walking_speed": walkingSpeed, 
            "bike_speed": bikeSpeed, 
            "bss_speed": bssSpeed, 
            "car_speed": carSpeed, 
            "ridesharing_speed": ridesharingSpeed, 
            "forbidden_uris[]": forbiddenUris, 
            "allowed_id[]": allowedId, 
            "disruption_active": disruptionActive, 
            "data_freshness": dataFreshness?.rawValue, 
            "max_duration": maxDuration?.encodeToJSON(), 
            "wheelchair": wheelchair, 
            "traveler_type": travelerType?.rawValue, 
            "direct_path": directPath?.rawValue, 
            "free_radius_from": freeRadiusFrom?.encodeToJSON(), 
            "free_radius_to": freeRadiusTo?.encodeToJSON(), 
            "resolution": resolution?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<HeatMap1>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

    public enum DatetimeRepresents_getCoverageRegionHeatMaps: String { 
        case arrival = "arrival"
        case departure = "departure"
    }

    public enum FirstSectionMode_getCoverageRegionHeatMaps: String { 
        case walking = "walking"
        case car = "car"
        case bike = "bike"
        case bss = "bss"
        case ridesharing = "ridesharing"
    }

    public enum LastSectionMode_getCoverageRegionHeatMaps: String { 
        case walking = "walking"
        case car = "car"
        case bike = "bike"
        case bss = "bss"
        case ridesharing = "ridesharing"
    }

    public enum DataFreshness_getCoverageRegionHeatMaps: String { 
        case baseSchedule = "base_schedule"
        case adaptedSchedule = "adapted_schedule"
        case realtime = "realtime"
    }

    public enum TravelerType_getCoverageRegionHeatMaps: String { 
        case cyclist = "cyclist"
        case luggage = "luggage"
        case wheelchair = "wheelchair"
        case standard = "standard"
        case motorist = "motorist"
        case fastWalker = "fast_walker"
        case slowWalker = "slow_walker"
    }

    public enum DirectPath_getCoverageRegionHeatMaps: String { 
        case indifferent = "indifferent"
        case only = "only"
        case _none = "none"
    }


    open class func getCoverageRegionHeatMaps(region: String, from: String? = nil, to: String? = nil, datetime: Date? = nil, datetimeRepresents: DatetimeRepresents_getCoverageRegionHeatMaps? = nil, maxNbTransfers: Int? = nil, minNbTransfers: Int? = nil, firstSectionMode: [String]? = nil, lastSectionMode: [String]? = nil, maxDurationToPt: Int? = nil, maxWalkingDurationToPt: Int? = nil, maxBikeDurationToPt: Int? = nil, maxBssDurationToPt: Int? = nil, maxCarDurationToPt: Int? = nil, maxRidesharingDurationToPt: Int? = nil, walkingSpeed: Float? = nil, bikeSpeed: Float? = nil, bssSpeed: Float? = nil, carSpeed: Float? = nil, ridesharingSpeed: Float? = nil, forbiddenUris: [String]? = nil, allowedId: [String]? = nil, disruptionActive: Bool? = nil, dataFreshness: DataFreshness_getCoverageRegionHeatMaps? = nil, maxDuration: Int? = nil, wheelchair: Bool? = nil, travelerType: TravelerType_getCoverageRegionHeatMaps? = nil, directPath: DirectPath_getCoverageRegionHeatMaps? = nil, freeRadiusFrom: Int? = nil, freeRadiusTo: Int? = nil, resolution: Int? = nil, completion: @escaping ((_ data: HeatMap1?,_ error: Error?) -> Void)) {
        getCoverageRegionHeatMapsWithRequestBuilder(region: region, from: from, to: to, datetime: datetime, datetimeRepresents: datetimeRepresents, maxNbTransfers: maxNbTransfers, minNbTransfers: minNbTransfers, firstSectionMode: firstSectionMode, lastSectionMode: lastSectionMode, maxDurationToPt: maxDurationToPt, maxWalkingDurationToPt: maxWalkingDurationToPt, maxBikeDurationToPt: maxBikeDurationToPt, maxBssDurationToPt: maxBssDurationToPt, maxCarDurationToPt: maxCarDurationToPt, maxRidesharingDurationToPt: maxRidesharingDurationToPt, walkingSpeed: walkingSpeed, bikeSpeed: bikeSpeed, bssSpeed: bssSpeed, carSpeed: carSpeed, ridesharingSpeed: ridesharingSpeed, forbiddenUris: forbiddenUris, allowedId: allowedId, disruptionActive: disruptionActive, dataFreshness: dataFreshness, maxDuration: maxDuration, wheelchair: wheelchair, travelerType: travelerType, directPath: directPath, freeRadiusFrom: freeRadiusFrom, freeRadiusTo: freeRadiusTo, resolution: resolution).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    open class func getCoverageRegionHeatMapsWithRequestBuilder(region: String, from: String? = nil, to: String? = nil, datetime: Date? = nil, datetimeRepresents: DatetimeRepresents_getCoverageRegionHeatMaps? = nil, maxNbTransfers: Int? = nil, minNbTransfers: Int? = nil, firstSectionMode: [String]? = nil, lastSectionMode: [String]? = nil, maxDurationToPt: Int? = nil, maxWalkingDurationToPt: Int? = nil, maxBikeDurationToPt: Int? = nil, maxBssDurationToPt: Int? = nil, maxCarDurationToPt: Int? = nil, maxRidesharingDurationToPt: Int? = nil, walkingSpeed: Float? = nil, bikeSpeed: Float? = nil, bssSpeed: Float? = nil, carSpeed: Float? = nil, ridesharingSpeed: Float? = nil, forbiddenUris: [String]? = nil, allowedId: [String]? = nil, disruptionActive: Bool? = nil, dataFreshness: DataFreshness_getCoverageRegionHeatMaps? = nil, maxDuration: Int? = nil, wheelchair: Bool? = nil, travelerType: TravelerType_getCoverageRegionHeatMaps? = nil, directPath: DirectPath_getCoverageRegionHeatMaps? = nil, freeRadiusFrom: Int? = nil, freeRadiusTo: Int? = nil, resolution: Int? = nil) -> RequestBuilder<HeatMap1> {
        var path = "/coverage/{region}/heat_maps"
        let regionPreEscape = "\(region)"
        let regionPostEscape = regionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{region}", with: regionPostEscape, options: .literal, range: nil)
        let URLString = NavitiaSDK.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "from": from, 
            "to": to, 
            "datetime": datetime?.encodeToJSON(), 
            "datetime_represents": datetimeRepresents?.rawValue, 
            "max_nb_transfers": maxNbTransfers?.encodeToJSON(), 
            "min_nb_transfers": minNbTransfers?.encodeToJSON(), 
            "first_section_mode[]": firstSectionMode, 
            "last_section_mode[]": lastSectionMode, 
            "max_duration_to_pt": maxDurationToPt?.encodeToJSON(), 
            "max_walking_duration_to_pt": maxWalkingDurationToPt?.encodeToJSON(), 
            "max_bike_duration_to_pt": maxBikeDurationToPt?.encodeToJSON(), 
            "max_bss_duration_to_pt": maxBssDurationToPt?.encodeToJSON(), 
            "max_car_duration_to_pt": maxCarDurationToPt?.encodeToJSON(), 
            "max_ridesharing_duration_to_pt": maxRidesharingDurationToPt?.encodeToJSON(), 
            "walking_speed": walkingSpeed, 
            "bike_speed": bikeSpeed, 
            "bss_speed": bssSpeed, 
            "car_speed": carSpeed, 
            "ridesharing_speed": ridesharingSpeed, 
            "forbidden_uris[]": forbiddenUris, 
            "allowed_id[]": allowedId, 
            "disruption_active": disruptionActive, 
            "data_freshness": dataFreshness?.rawValue, 
            "max_duration": maxDuration?.encodeToJSON(), 
            "wheelchair": wheelchair, 
            "traveler_type": travelerType?.rawValue, 
            "direct_path": directPath?.rawValue, 
            "free_radius_from": freeRadiusFrom?.encodeToJSON(), 
            "free_radius_to": freeRadiusTo?.encodeToJSON(), 
            "resolution": resolution?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<HeatMap1>.Type = NavitiaSDK.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false).addCredential()
    }

}
