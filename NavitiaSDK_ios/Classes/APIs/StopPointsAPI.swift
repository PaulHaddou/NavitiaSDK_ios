//
// StopPointsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire
import AlamofireObjectMapper


open class CoverageLonLatStopPointsRequestBuilder: NSObject {
    let currentApi: StopPointsAPI

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageLonLatStopPoints: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat: Double? = nil
    var lon: Double? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageLonLatStopPoints? = nil
    var distance: Int32? = nil
    var since: String? = nil
    var until: String? = nil
    var disableGeojson: Bool? = nil
    var filter: String? = nil
    var originalId: String? = nil

    public init(currentApi: StopPointsAPI) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatStopPointsRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatStopPointsRequestBuilder {
        self.lon = lon
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatStopPointsRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatStopPointsRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatStopPointsRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatStopPointsRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatStopPointsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatStopPointsRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatStopPointsRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatStopPointsRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageLonLatStopPoints) -> CoverageLonLatStopPointsRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageLonLatStopPointsRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageLonLatStopPoints(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatStopPointsRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: String) -> CoverageLonLatStopPointsRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: String) -> CoverageLonLatStopPointsRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatStopPointsRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageLonLatStopPointsRequestBuilder {
        self.filter = filter
        return self
    }
    open func withOriginalId(_ originalId: String) -> CoverageLonLatStopPointsRequestBuilder {
        self.originalId = originalId
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/stop_points"
        path = path.replacingOccurrences(of: "{lat}", with: "\(self.lat!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{lon}", with: "\(self.lon!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since, 
            "until": self.until, 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter, 
            "original_id": self.originalId
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: StopPoints?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<StopPoints>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatStopPointsIdRequestBuilder: NSObject {
    let currentApi: StopPointsAPI

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageLonLatStopPointsId: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat: Double? = nil
    var lon: Double? = nil
    var id: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageLonLatStopPointsId? = nil
    var distance: Int32? = nil
    var since: String? = nil
    var until: String? = nil
    var disableGeojson: Bool? = nil
    var originalId: String? = nil

    public init(currentApi: StopPointsAPI) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.lon = lon
        return self
    }
    open func withId(_ id: String) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageLonLatStopPointsId) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageLonLatStopPointsIdRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageLonLatStopPointsId(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: String) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: String) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withOriginalId(_ originalId: String) -> CoverageLonLatStopPointsIdRequestBuilder {
        self.originalId = originalId
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/stop_points/{id}"
        path = path.replacingOccurrences(of: "{lat}", with: "\(self.lat!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{lon}", with: "\(self.lon!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(self.id!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since, 
            "until": self.until, 
            "disable_geojson": self.disableGeojson, 
            "original_id": self.originalId
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: StopPoints?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<StopPoints>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatUriStopPointsRequestBuilder: NSObject {
    let currentApi: StopPointsAPI

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageLonLatUriStopPoints: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat: Double? = nil
    var lon: Double? = nil
    var uri: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageLonLatUriStopPoints? = nil
    var distance: Int32? = nil
    var since: String? = nil
    var until: String? = nil
    var disableGeojson: Bool? = nil
    var filter: String? = nil
    var originalId: String? = nil

    public init(currentApi: StopPointsAPI) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.lon = lon
        return self
    }
    open func withUri(_ uri: String) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.uri = uri
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageLonLatUriStopPoints) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageLonLatUriStopPointsRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageLonLatUriStopPoints(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: String) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: String) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.filter = filter
        return self
    }
    open func withOriginalId(_ originalId: String) -> CoverageLonLatUriStopPointsRequestBuilder {
        self.originalId = originalId
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/{uri}/stop_points"
        path = path.replacingOccurrences(of: "{lat}", with: "\(self.lat!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{lon}", with: "\(self.lon!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{uri}", with: "\(self.uri!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since, 
            "until": self.until, 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter, 
            "original_id": self.originalId
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: StopPoints?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<StopPoints>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageLonLatUriStopPointsIdRequestBuilder: NSObject {
    let currentApi: StopPointsAPI

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageLonLatUriStopPointsId: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var lat: Double? = nil
    var lon: Double? = nil
    var uri: String? = nil
    var id: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageLonLatUriStopPointsId? = nil
    var distance: Int32? = nil
    var since: String? = nil
    var until: String? = nil
    var disableGeojson: Bool? = nil
    var originalId: String? = nil

    public init(currentApi: StopPointsAPI) {
        self.currentApi = currentApi
    }

    open func withLat(_ lat: Double) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.lat = lat
        return self
    }
    open func withLon(_ lon: Double) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.lon = lon
        return self
    }
    open func withUri(_ uri: String) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.uri = uri
        return self
    }
    open func withId(_ id: String) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageLonLatUriStopPointsId) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageLonLatUriStopPointsId(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: String) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: String) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withOriginalId(_ originalId: String) -> CoverageLonLatUriStopPointsIdRequestBuilder {
        self.originalId = originalId
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{lon};{lat}/{uri}/stop_points/{id}"
        path = path.replacingOccurrences(of: "{lat}", with: "\(self.lat!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{lon}", with: "\(self.lon!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{uri}", with: "\(self.uri!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(self.id!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since, 
            "until": self.until, 
            "disable_geojson": self.disableGeojson, 
            "original_id": self.originalId
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: StopPoints?,_ error: Error?) -> Void)) {
        if (self.lat == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
        }
        if (self.lon == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<StopPoints>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.lat == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lat"])))
    }
    if (self.lon == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : lon"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionStopPointsRequestBuilder: NSObject {
    let currentApi: StopPointsAPI

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageRegionStopPoints: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageRegionStopPoints? = nil
    var distance: Int32? = nil
    var since: String? = nil
    var until: String? = nil
    var disableGeojson: Bool? = nil
    var filter: String? = nil
    var originalId: String? = nil

    public init(currentApi: StopPointsAPI) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionStopPointsRequestBuilder {
        self.region = region
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionStopPointsRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionStopPointsRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionStopPointsRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionStopPointsRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionStopPointsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionStopPointsRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionStopPointsRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionStopPointsRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageRegionStopPoints) -> CoverageRegionStopPointsRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageRegionStopPointsRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageRegionStopPoints(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionStopPointsRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: String) -> CoverageRegionStopPointsRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: String) -> CoverageRegionStopPointsRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionStopPointsRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageRegionStopPointsRequestBuilder {
        self.filter = filter
        return self
    }
    open func withOriginalId(_ originalId: String) -> CoverageRegionStopPointsRequestBuilder {
        self.originalId = originalId
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/stop_points"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since, 
            "until": self.until, 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter, 
            "original_id": self.originalId
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: StopPoints?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<StopPoints>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionStopPointsIdRequestBuilder: NSObject {
    let currentApi: StopPointsAPI

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageRegionStopPointsId: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region: String? = nil
    var id: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageRegionStopPointsId? = nil
    var distance: Int32? = nil
    var since: String? = nil
    var until: String? = nil
    var disableGeojson: Bool? = nil
    var originalId: String? = nil

    public init(currentApi: StopPointsAPI) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionStopPointsIdRequestBuilder {
        self.region = region
        return self
    }
    open func withId(_ id: String) -> CoverageRegionStopPointsIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionStopPointsIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionStopPointsIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionStopPointsIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionStopPointsIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionStopPointsIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionStopPointsIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionStopPointsIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionStopPointsIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageRegionStopPointsId) -> CoverageRegionStopPointsIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageRegionStopPointsIdRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageRegionStopPointsId(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionStopPointsIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: String) -> CoverageRegionStopPointsIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: String) -> CoverageRegionStopPointsIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionStopPointsIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withOriginalId(_ originalId: String) -> CoverageRegionStopPointsIdRequestBuilder {
        self.originalId = originalId
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/stop_points/{id}"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(self.id!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since, 
            "until": self.until, 
            "disable_geojson": self.disableGeojson, 
            "original_id": self.originalId
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: StopPoints?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<StopPoints>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriStopPointsRequestBuilder: NSObject {
    let currentApi: StopPointsAPI

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageRegionUriStopPoints: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region: String? = nil
    var uri: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageRegionUriStopPoints? = nil
    var distance: Int32? = nil
    var since: String? = nil
    var until: String? = nil
    var disableGeojson: Bool? = nil
    var filter: String? = nil
    var originalId: String? = nil

    public init(currentApi: StopPointsAPI) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionUriStopPointsRequestBuilder {
        self.region = region
        return self
    }
    open func withUri(_ uri: String) -> CoverageRegionUriStopPointsRequestBuilder {
        self.uri = uri
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionUriStopPointsRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionUriStopPointsRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionUriStopPointsRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionUriStopPointsRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionUriStopPointsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionUriStopPointsRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionUriStopPointsRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionUriStopPointsRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageRegionUriStopPoints) -> CoverageRegionUriStopPointsRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageRegionUriStopPointsRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageRegionUriStopPoints(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionUriStopPointsRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: String) -> CoverageRegionUriStopPointsRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: String) -> CoverageRegionUriStopPointsRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionUriStopPointsRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> CoverageRegionUriStopPointsRequestBuilder {
        self.filter = filter
        return self
    }
    open func withOriginalId(_ originalId: String) -> CoverageRegionUriStopPointsRequestBuilder {
        self.originalId = originalId
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/stop_points"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{uri}", with: "\(self.uri!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since, 
            "until": self.until, 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter, 
            "original_id": self.originalId
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: StopPoints?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<StopPoints>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class CoverageRegionUriStopPointsIdRequestBuilder: NSObject {
    let currentApi: StopPointsAPI

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getCoverageRegionUriStopPointsId: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var region: String? = nil
    var uri: String? = nil
    var id: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var externalCode: String? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getCoverageRegionUriStopPointsId? = nil
    var distance: Int32? = nil
    var since: String? = nil
    var until: String? = nil
    var disableGeojson: Bool? = nil
    var originalId: String? = nil

    public init(currentApi: StopPointsAPI) {
        self.currentApi = currentApi
    }

    open func withRegion(_ region: String) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.region = region
        return self
    }
    open func withUri(_ uri: String) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.uri = uri
        return self
    }
    open func withId(_ id: String) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.id = id
        return self
    }
    open func withStartPage(_ startPage: Int32) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withExternalCode(_ externalCode: String) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withHeadsign(_ headsign: String) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getCoverageRegionUriStopPointsId) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> CoverageRegionUriStopPointsIdRequestBuilder {
        return withOdtLevel(OdtLevel_getCoverageRegionUriStopPointsId(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: String) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: String) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withOriginalId(_ originalId: String) -> CoverageRegionUriStopPointsIdRequestBuilder {
        self.originalId = originalId
        return self
    }

    open func makeUrl() -> String {
        var path = "/coverage/{region}/{uri}/stop_points/{id}"
        path = path.replacingOccurrences(of: "{region}", with: "\(self.region!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{uri}", with: "\(self.uri!)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{id}", with: "\(self.id!)", options: .literal, range: nil)
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since, 
            "until": self.until, 
            "disable_geojson": self.disableGeojson, 
            "original_id": self.originalId
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: StopPoints?,_ error: Error?) -> Void)) {
        if (self.region == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
        }
        if (self.uri == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
        }
        if (self.id == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<StopPoints>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.region == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : region"])))
    }
    if (self.uri == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : uri"])))
    }
    if (self.id == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : id"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}

open class StopPointsRequestBuilder: NSObject {
    let currentApi: StopPointsAPI

    /**
    * enum for parameter odtLevel
    */
    public enum OdtLevel_getStopPoints: String { 
        case scheduled = "scheduled"
        case all = "all"
        case zonal = "zonal"
        case withStops = "with_stops"
    }
    var externalCode: String? = nil
    var startPage: Int32? = nil
    var count: Int32? = nil
    var depth: Int32? = nil
    var forbiddenId: [String]? = nil
    var forbiddenUris: [String]? = nil
    var headsign: String? = nil
    var showCodes: Bool? = nil
    var odtLevel: OdtLevel_getStopPoints? = nil
    var distance: Int32? = nil
    var since: String? = nil
    var until: String? = nil
    var disableGeojson: Bool? = nil
    var filter: String? = nil
    var originalId: String? = nil

    public init(currentApi: StopPointsAPI) {
        self.currentApi = currentApi
    }

    open func withExternalCode(_ externalCode: String) -> StopPointsRequestBuilder {
        self.externalCode = externalCode
        return self
    }
    open func withStartPage(_ startPage: Int32) -> StopPointsRequestBuilder {
        self.startPage = startPage
        return self
    }
    open func withCount(_ count: Int32) -> StopPointsRequestBuilder {
        self.count = count
        return self
    }
    open func withDepth(_ depth: Int32) -> StopPointsRequestBuilder {
        self.depth = depth
        return self
    }
    open func withForbiddenId(_ forbiddenId: [String]) -> StopPointsRequestBuilder {
        self.forbiddenId = forbiddenId
        return self
    }
    open func withForbiddenUris(_ forbiddenUris: [String]) -> StopPointsRequestBuilder {
        self.forbiddenUris = forbiddenUris
        return self
    }
    open func withHeadsign(_ headsign: String) -> StopPointsRequestBuilder {
        self.headsign = headsign
        return self
    }
    open func withShowCodes(_ showCodes: Bool) -> StopPointsRequestBuilder {
        self.showCodes = showCodes
        return self
    }
    open func withOdtLevel(_ odtLevel: OdtLevel_getStopPoints) -> StopPointsRequestBuilder {
        self.odtLevel = odtLevel
        return self
    }
    open func withOdtLevel(_ odtLevelValue: String) -> StopPointsRequestBuilder {
        return withOdtLevel(OdtLevel_getStopPoints(rawValue: odtLevelValue)!);
    }
    open func withDistance(_ distance: Int32) -> StopPointsRequestBuilder {
        self.distance = distance
        return self
    }
    open func withSince(_ since: String) -> StopPointsRequestBuilder {
        self.since = since
        return self
    }
    open func withUntil(_ until: String) -> StopPointsRequestBuilder {
        self.until = until
        return self
    }
    open func withDisableGeojson(_ disableGeojson: Bool) -> StopPointsRequestBuilder {
        self.disableGeojson = disableGeojson
        return self
    }
    open func withFilter(_ filter: String) -> StopPointsRequestBuilder {
        self.filter = filter
        return self
    }
    open func withOriginalId(_ originalId: String) -> StopPointsRequestBuilder {
        self.originalId = originalId
        return self
    }

    open func makeUrl() -> String {
        let path = "/stop_points"
        let URLString = "https://api.navitia.io/v1" + path
        let url = NSURLComponents(string: URLString)

        let paramValues: [String: Any] = [
            "start_page": self.startPage?.encodeToJSON(), 
            "count": self.count?.encodeToJSON(), 
            "depth": self.depth?.encodeToJSON(), 
            "forbidden_id[]": self.forbiddenId, 
            "forbidden_uris[]": self.forbiddenUris, 
            "external_code": self.externalCode!, 
            "headsign": self.headsign, 
            "show_codes": self.showCodes, 
            "odt_level": self.odtLevel?.rawValue, 
            "distance": self.distance?.encodeToJSON(), 
            "since": self.since, 
            "until": self.until, 
            "disable_geojson": self.disableGeojson, 
            "filter": self.filter, 
            "original_id": self.originalId
        ]
        url?.queryItems = APIHelper.mapValuesToQueryItems(values: paramValues)

        return (url?.string ?? URLString)
    }

    open func get(completion: @escaping ((_ data: StopPoints?,_ error: Error?) -> Void)) {
        if (self.externalCode == nil) {
            completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : externalCode"])))
        }

        Alamofire.request(self.makeUrl())
            .authenticate(user: currentApi.token, password: "")
            .validate()
            .responseObject{ (response: (DataResponse<StopPoints>)) in
                switch response.result {
                case .success:
                    completion(response.result.value, nil)
                case .failure(let error):
                    completion(nil, error)
                }
            }
    }

    open func rawGet(completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
    if (self.externalCode == nil) {
        completion(nil, ErrorResponse.Error(500, nil, NSError(domain: "localhost", code: 500, userInfo: ["reason": "Missing mandatory argument : externalCode"])))
    }

    Alamofire.request(self.makeUrl())
        .authenticate(user: currentApi.token, password: "")
        .validate()
        .responseString{ (response: (DataResponse<String>)) in
            switch response.result {
            case .success:
                completion(response.result.value, nil)
            case .failure(let error):
                completion(nil, error)
            }
        }
    }
}



open class StopPointsAPI: APIBase {
    let token: String

    public init(token: String) {
        self.token = token
    }

    public func newCoverageLonLatStopPointsRequestBuilder() -> CoverageLonLatStopPointsRequestBuilder {
        return CoverageLonLatStopPointsRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatStopPointsIdRequestBuilder() -> CoverageLonLatStopPointsIdRequestBuilder {
        return CoverageLonLatStopPointsIdRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatUriStopPointsRequestBuilder() -> CoverageLonLatUriStopPointsRequestBuilder {
        return CoverageLonLatUriStopPointsRequestBuilder(currentApi: self)
    }
    public func newCoverageLonLatUriStopPointsIdRequestBuilder() -> CoverageLonLatUriStopPointsIdRequestBuilder {
        return CoverageLonLatUriStopPointsIdRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionStopPointsRequestBuilder() -> CoverageRegionStopPointsRequestBuilder {
        return CoverageRegionStopPointsRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionStopPointsIdRequestBuilder() -> CoverageRegionStopPointsIdRequestBuilder {
        return CoverageRegionStopPointsIdRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriStopPointsRequestBuilder() -> CoverageRegionUriStopPointsRequestBuilder {
        return CoverageRegionUriStopPointsRequestBuilder(currentApi: self)
    }
    public func newCoverageRegionUriStopPointsIdRequestBuilder() -> CoverageRegionUriStopPointsIdRequestBuilder {
        return CoverageRegionUriStopPointsIdRequestBuilder(currentApi: self)
    }
    public func newStopPointsRequestBuilder() -> StopPointsRequestBuilder {
        return StopPointsRequestBuilder(currentApi: self)
    }
}
